{"ast":null,"code":"import _asyncToGenerator from \"/Users/zhahn/Desktop/\\u672A\\u547D\\u540D\\u6587\\u4EF6\\u5939/lin-cms-vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/zhahn/Desktop/\\u672A\\u547D\\u540D\\u6587\\u4EF6\\u5939/lin-cms-vue/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/zhahn/Desktop/\\u672A\\u547D\\u540D\\u6587\\u4EF6\\u5939/lin-cms-vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport { post } from '@/lin/plugin/axios';\nimport { getFileType, checkIsAnimated, isEmptyObj, createId } from './utils';\n/**\n * 本地图像通过验证后构造的信息对象\n * @typedef {Object<string, number, any>} LocalFileInfo\n * @property {string} localSrc 本地图像预览地址\n * @property {File} file 本地图像文件\n * @property {number} width 宽\n * @property {number} height 高\n * @property {string} name 文件名\n * @property {number} size 文件大小\n * @property {string} type 文件的媒体类型 (MIME)\n * @property {Date} lastModified 文件最后修改时间\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * 初始化的图片如果没有传入字段, 则值为空 null\n * @typedef {Object<string, number>} ReturnItem\n * @property {number|string} id 初始化数据的 id\n * @property {number|string} imgId 图像资源 id\n * @property {string} src 文件相对路径\n * @property {string} display 图像完整地址\n * @property {number} height 高\n * @property {number} width 宽\n * @property {string} fileName 文件名\n * @property {string} fileType 文件的媒体类型 (MIME), 针对部分文件类型做了检测\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * @typedef {Object} ValidateRule\n * @property {array|number} ratio 比例 [宽，高], 或者 宽/高 的数值\n * @property {number} width 宽度必需等于\n * @property {number} height 高度必需等于\n * @property {number} minWidth 最小宽\n * @property {number} minHeight 最小高\n * @property {number} minSize 最小 size（Mb)\n * @property {number} maxSize 最大 size（Mb)\n * @property {number} allowAnimated 是否允许上传动图, 0 不检测, 1 不允许动图, 2 只允许动图. 要检查此项, 需设置属性 animated-check 为 true\n */\n\nvar ONE_KB = 1024;\nvar ONE_MB = ONE_KB * 1024;\n/**\n * 创建项, 如不传入参数则创建空项\n * status 状态转换说明:\n *  - 如果不传入参数, 创建上传空项, status: input\n *  - 如果只传入 data, 不传入 oldData\n *    - data 是本地数据(数据中是否携带id), status: new\n *    - data 不是本地数据(来源可能是初始化或是其他), status 与原状态保持一致, 如果没有原状态就是 init\n *  - data 与 oldData 都传入\n *    - data 为本地数据, oldData 是 input/new, status: new\n *    - data 为本地数据, oldData 是 init/edit, status: edit\n *    - data 不是本地数据, status 与原状态保持一致, 如果没有原状态就是 init\n * @returns {Item}\n */\n\nfunction createItem() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var oldData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var item = {\n    loading: false,\n    id: createId(),\n    status: 'input',\n    // new/edit/del/init/input\n    src: '',\n    // 图像相对地址\n    display: '',\n    // 图像完整地址, 用于显示\n    imgId: '' // 图像资源 id\n\n  }; // 未传入data, 说明是单纯新建, 单纯新建的值是输入框状态\n\n  if (!data) {\n    return item;\n  } // 判断是否是本地图片\n\n\n  if (data.file && !data.id) {\n    if (!isEmptyObj(oldData)) {\n      // 如果旧数据状态是输入框, 则为新图片\n      if (oldData.status === 'input' || oldData.status === 'new') {\n        item.status = 'new';\n      } // 如果旧数据状态是初始化 init, 则为修改\n\n\n      if (oldData.status === 'init' || oldData.status === 'edit') {\n        item.status = 'edit';\n      }\n    } else {\n      item.status = 'new';\n    } // 本地数据初始化\n\n\n    item.id = oldData.id || item.id;\n    item.src = '';\n    item.imgId = '';\n    item.display = data.localSrc || item.display;\n    item = _objectSpread(_objectSpread({}, data), item);\n    return item;\n  } // 存在id, 说明是传入已存在数据\n\n\n  item.id = data.id || createId();\n  item.imgId = data.imgId || item.imgId;\n  item.src = data.src || item.src;\n  item.display = data.display || item.display;\n  item.status = data.status || 'init';\n  item = _objectSpread(_objectSpread({}, data), item);\n  return item;\n}\n/**\n * 获取范围类型限制的提示文本\n * @param {String} prx 提示前缀\n * @param {Number} min 范围下限\n * @param {Number} max 范围上限\n * @param {String} unit 单位\n */\n\n\nfunction getRangeTip(prx, min, max) {\n  var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var str = prx;\n\n  if (min && max) {\n    // 有范围限制\n    str += \" \".concat(min).concat(unit, \"~\").concat(max).concat(unit);\n  } else if (min) {\n    // 只有最小范围\n    str += \" \\u2265 \".concat(min).concat(unit);\n  } else if (max) {\n    // 只有最大范围\n    str += \" \\u2264 \".concat(max).concat(unit);\n  } else {\n    // 无限制\n    str += '无限制';\n  }\n\n  return str;\n}\n/** for originUpload: 一次请求最多的文件数量 */\n\n\nvar uploadLimit = 10;\n/** for originUpload: 文件对象缓存 */\n\nvar catchData = [];\n/** for originUpload: 计时器缓存 */\n\nvar time;\nexport default {\n  name: 'UploadImgs',\n  data: function data() {\n    return {\n      srcList: [],\n      itemList: [],\n      imageRefs: [],\n      loading: false,\n      currentId: '',\n      // 正在操作项的id\n      imageInitialIndex: 0\n    };\n  },\n  props: {\n    /** 每一项宽度 */\n    width: {\n      type: [Number, String],\n      default: 160\n    },\n\n    /** 每一项高度 */\n    height: {\n      type: [Number, String],\n      default: 160\n    },\n\n    /** 是否开启自动上传 */\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n\n    /** 初始化数据 */\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n\n    /** 接受的文件类型 */\n    accept: {\n      type: String,\n      default: 'image/*'\n    },\n\n    /** 最少图片数量 */\n    minNum: {\n      type: Number,\n      default: 0\n    },\n\n    /** 最多图片数量, 0 表示无限制 */\n    maxNum: {\n      type: Number,\n      default: 0\n    },\n\n    /** 是否可排序 */\n    sortable: {\n      type: Boolean,\n      default: false\n    },\n\n    /** 是否可预览 */\n    preview: {\n      type: Boolean,\n      default: true\n    },\n\n    /** 是否可以一次多选 */\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n\n    /** 图像验证规则 */\n    rules: {\n      type: [Object, Function],\n      default: function _default() {\n        return {\n          maxSize: 2\n        };\n      }\n    },\n\n    /** 是否禁用, 禁用后只可展示 不可进行编辑操作, 包括: 新增, 修改, 删除, 改变顺序 */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n\n    /** 上传前插入方法, 属于高级用法 */\n    beforeUpload: {\n      type: Function,\n      default: null\n    },\n\n    /** 重写上传方法, 如果重写则覆盖组件内上传方法 */\n    remoteFuc: {\n      type: Function,\n      default: null\n    },\n\n    /** 图像显示模式 */\n    fit: {\n      type: String,\n      default: 'contain'\n    },\n\n    /** 检测是否是动图 */\n    animatedCheck: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    /** 每项容器样式 */\n    boxStyle: function boxStyle() {\n      var width = this.width,\n          height = this.height,\n          disabled = this.disabled;\n      var style = {};\n\n      if (typeof width === 'number') {\n        style.width = \"\".concat(width, \"px\");\n      } else if (typeof width === 'string') {\n        style.width = width;\n      }\n\n      if (typeof height === 'number') {\n        style.height = \"\".concat(height, \"px\");\n      } else if (typeof height === 'string') {\n        style.height = height;\n      }\n\n      if (disabled) {\n        style.cursor = 'not-allowed';\n      } else {\n        style.cursor = 'pointer';\n      }\n      /** 提示字体最大尺寸 */\n\n\n      var fontSize = 12;\n      /** 每行提示预设 */\n\n      var maxText = 8;\n\n      if (typeof width === 'number' && width / maxText < fontSize) {\n        fontSize = (width / maxText).toFixed(2);\n      }\n\n      style.fontSize = \"\".concat(fontSize, \"px\");\n      style.textAlign = 'center';\n      style.position = 'relative';\n      style.display = 'flex';\n      style.alignItems = 'center';\n      style.justifyContent = 'center';\n      style.overflow = 'hidden';\n      style.lineHeight = '1.3';\n      style.flexDirection = 'column';\n      return style;\n    },\n\n    /**\n     * 上传图像数量下限\n     * @returns {Number}\n     */\n    min: function min() {\n      var minNum = this.minNum;\n      return minNum < 0 ? 0 : parseInt(minNum, 10);\n    },\n\n    /**\n     * 上传图像数量上限\n     * @returns {Number}\n     */\n    max: function max() {\n      var min = this.min,\n          maxNum = this.maxNum; // 兼容用最大值小于最小值情况\n\n      return maxNum < min ? min : parseInt(maxNum, 10);\n    },\n\n    /**\n     * 是否是固定数量(最小等于最大)\n     * @returns {Boolean}\n     */\n    isStable: function isStable() {\n      var min = this.min,\n          max = this.max;\n      return max !== 0 && min === max;\n    },\n\n    /** 构造图像规范提示 */\n    rulesTip: function rulesTip() {\n      var rules = this.rules;\n      var tips = [];\n      /** 图像验证规则 */\n\n      var basicRule; // 针对动态规则模式, 获取输入为空时的规则\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n\n      if (typeof rules === 'function') {\n        try {\n          basicRule = rules();\n        } catch (err) {\n          basicRule = {};\n        }\n      } else {\n        basicRule = rules || {};\n      } // 宽高限制提示语\n\n\n      if (basicRule.width && basicRule.height) {\n        // 固定宽高限制\n        tips.push(\"\\u5BBD\\u9AD8 \".concat(basicRule.width, \"x\").concat(basicRule.height));\n      } else if (basicRule.width) {\n        // 固定宽限制\n        tips.push(\"\\u5BBD\\u5EA6 \".concat(basicRule.width));\n        tips.push(\"\".concat(getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)));\n      } else if (basicRule.height) {\n        // 固定高限制\n        tips.push(\"\\u9AD8\\u5EA6 \".concat(basicRule.height));\n        tips.push(\"\".concat(getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)));\n      } else {\n        // 宽高都不固定\n        tips.push(\"\".concat(getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)));\n        tips.push(\"\".concat(getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)));\n      } // 宽高比限制提示语\n\n\n      if (basicRule.ratio) {\n        if (Array.isArray(basicRule.ratio)) {\n          tips.push(\"\\u5BBD\\u9AD8\\u6BD4 \".concat(basicRule.ratio.join(':')));\n        } else {\n          tips.push(\"\\u5BBD\\u9AD8\\u6BD4 \".concat(basicRule.ratio));\n        }\n      } // 文件大小\n\n\n      if (basicRule.minSize || basicRule.maxSize) {\n        tips.push(getRangeTip('文件大小', basicRule.minSize, basicRule.maxSize, 'Mb'));\n      } // 是否动态图\n\n\n      if (basicRule.allowAnimated && basicRule.allowAnimated > 0) {\n        if (basicRule.allowAnimated === 1) {\n          tips.push('不允许上传动图');\n        } else if (basicRule.allowAnimated === 2) {\n          tips.push('只允许上传动图');\n        }\n      }\n\n      return tips;\n    }\n  },\n  watch: {\n    /** 初始化值修改时重新初始化, 并且清空当前的编辑状态 */\n    value: function value(val) {\n      // 初始化数据\n      this.initItemList(val);\n    }\n  },\n  mounted: function mounted() {\n    this.initItemList(this.value);\n  },\n  methods: {\n    /**\n     * 上传缓存中的图片\n     * @param {Array} uploadList 需要上传的缓存集合, 集合中包含回调函数\n     */\n    uploadCatch: function uploadCatch(uploadList) {\n      var _this = this;\n\n      var data = {};\n      uploadList.forEach(function (item, index) {\n        data[\"file_\".concat(index)] = item.img.file;\n      });\n      return post('cms/file', data).then(function (res) {\n        if (!Array.isArray(res) || res.length === 0) {\n          throw new Error('图像上传失败');\n        }\n\n        var resObj = res.reduce(function (acc, item) {\n          acc[item.key] = item;\n          return acc;\n        }, {});\n        uploadList.forEach(function (item, index) {\n          var remoteData = resObj[\"file_\".concat(index)];\n          item.cb(remoteData);\n        });\n      }).catch(function (err) {\n        uploadList.forEach(function (item) {\n          item.cb(false);\n        });\n        var msg = '图像上传失败, 请重试';\n\n        if (err.message) {\n          // eslint-disable-next-line\n          msg = err.message;\n        }\n\n        console.error(err);\n\n        _this.$message.error(msg);\n      });\n    },\n\n    /**\n     * 内置上传文件方法, 使用 debounce 优化提交效率\n     * 此处只能使用回调模式, 因为涉及 debounce 处理, promise 不可在外部改变其状态\n     * @param {Object} img 需要上传的数据项\n     * @param {Function} cb 回调函数\n     */\n    originUpload: function originUpload(img, cb) {\n      var _this2 = this;\n\n      // 并且一次最多上传文件数量设为可配置\n      // 添加缓存\n      catchData.push({\n        img: img,\n        cb: cb\n      }); // 等于上限, 立即上传\n\n      if (catchData.length === uploadLimit) {\n        var data = _toConsumableArray(catchData);\n\n        catchData = [];\n        clearTimeout(time);\n        time = null;\n        return this.uploadCatch(data);\n      } // 清除上次一的定时器\n\n\n      if (time && catchData.length < uploadLimit) {\n        clearTimeout(time); // 此时修改上一个 promise 状态为resolve\n      } // 等待100ms\n\n\n      time = setTimeout(function () {\n        _this2.uploadCatch(_toConsumableArray(catchData));\n\n        catchData = [];\n        time = null;\n      }, 50);\n    },\n\n    /**\n     * 上传图像文件\n     * @param {Object} 需要上传的项, 包含文化和其它信息\n     */\n    uploadImg: function uploadImg(item) {\n      var _this3 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var reduceResult, result, _result;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // 远程结果处理\n                reduceResult = function reduceResult(imgItem, res) {\n                  // eslint-disable-next-line\n                  imgItem.loading = false;\n\n                  if (!res) {\n                    return;\n                  } // eslint-disable-next-line\n\n\n                  imgItem.display = res.url; // eslint-disable-next-line\n\n                  imgItem.src = res.path; // eslint-disable-next-line\n\n                  imgItem.imgId = res.id; // eslint-disable-next-line\n\n                  imgItem.file = null;\n                  window.URL.revokeObjectURL(imgItem.display);\n                };\n\n                if (!(item.status === 'input' || !item.file)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                item.loading = true;\n\n                if (!(_this3.beforeUpload && typeof _this3.beforeUpload === 'function')) {\n                  _context.next = 12;\n                  break;\n                }\n\n                if (!(typeof _this3.beforeUpload === 'function')) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 8;\n                return new Promise(function (resolve) {\n                  var beforeUploadResult;\n\n                  try {\n                    beforeUploadResult = _this3.beforeUpload(item, function (data) {\n                      resolve(!!data);\n                    });\n                  } catch (err) {\n                    resolve(false);\n                  } // promise 模式\n\n\n                  if (beforeUploadResult != null && typeof beforeUploadResult.then === 'function') {\n                    beforeUploadResult.then(function (remoteData) {\n                      resolve(!!remoteData);\n                    }).catch(function () {\n                      resolve(false);\n                    });\n                  }\n                });\n\n              case 8:\n                result = _context.sent;\n\n                if (result) {\n                  _context.next = 12;\n                  break;\n                }\n\n                reduceResult(item, false);\n                return _context.abrupt(\"return\", false);\n\n              case 12:\n                if (!(_this3.remoteFuc && typeof _this3.remoteFuc === 'function')) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.next = 15;\n                return new Promise(function (resolve) {\n                  var remoteFucResult;\n\n                  try {\n                    remoteFucResult = _this3.remoteFuc(item.file, function (remoteData) {\n                      resolve(remoteData || false);\n                    });\n                  } catch (err) {\n                    _this3.$message.error('执行自定义上传出错');\n\n                    resolve(false);\n                  } // promise 模式\n\n\n                  if (remoteFucResult != null && typeof remoteFucResult.then === 'function') {\n                    remoteFucResult.then(function (remoteData) {\n                      resolve(remoteData || false);\n                    }).catch(function () {\n                      resolve(false);\n                    });\n                  }\n                });\n\n              case 15:\n                _result = _context.sent;\n                reduceResult(item, _result);\n\n                if (_result) {\n                  _context.next = 19;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 19:\n                return _context.abrupt(\"return\", item);\n\n              case 20:\n                return _context.abrupt(\"return\", new Promise(function (resolve) {\n                  _this3.originUpload(item, function (data) {\n                    reduceResult(item, data);\n\n                    if (!data) {\n                      resolve(false);\n                    } else {\n                      resolve(item);\n                    }\n                  });\n                }));\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n\n    /**\n     * 获取当前组件数据\n     */\n    getValue: function getValue() {\n      var _this4 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var itemList, isStable, min, l, i, asyncList, _i, imgInfoList, result;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                itemList = _this4.itemList, isStable = _this4.isStable, min = _this4.min; // 检查是否有不符合要求的空项\n\n                l = isStable ? itemList.length : itemList.length - 1;\n                i = 0;\n\n              case 3:\n                if (!(i < l)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                if (!(itemList[i].status === 'input')) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _this4.$message.error('当前存在未选择图片, 请全部选择');\n\n                return _context2.abrupt(\"return\", false);\n\n              case 7:\n                i += 1;\n                _context2.next = 3;\n                break;\n\n              case 10:\n                if (!(l < min)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _this4.$message.error(\"\\u81F3\\u5C11\\u9009\\u62E9\".concat(min, \"\\u5F20\\u56FE\\u7247\"));\n\n                return _context2.abrupt(\"return\", false);\n\n              case 13:\n                // 提取需要上传文件\n                asyncList = [];\n\n                for (_i = 0; _i < itemList.length; _i += 1) {\n                  // 跳过上传组件\n                  if (itemList[_i].status !== 'input') {\n                    if (!itemList[_i].file) {\n                      asyncList.push(Promise.resolve(itemList[_i]));\n                    } else {\n                      // 上传文件后获取对应key值\n                      asyncList.push(_this4.uploadImg(itemList[_i]));\n                    }\n                  }\n                }\n\n                _context2.next = 17;\n                return Promise.all(asyncList);\n\n              case 17:\n                imgInfoList = _context2.sent;\n\n                if (!imgInfoList.some(function (item) {\n                  return !item;\n                })) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 20:\n                // 如无错误, 表示图像都以上传, 开始构造数据\n\n                /**\n                 * @type {array<ReturnItem>}\n                 */\n                result = imgInfoList.map(function (item) {\n                  /** @type {ReturnItem} */\n                  var val = {\n                    id: item.status === 'new' ? '' : item.id,\n                    imgId: item.imgId || null,\n                    src: item.src || null,\n                    display: item.display,\n                    width: item.width || null,\n                    height: item.height || null,\n                    fileSize: item.size || null,\n                    fileName: item.name || null,\n                    fileType: item.type || null,\n                    isAnimated: item.isAnimated || null\n                  };\n                  return val;\n                }); // 获取数据成功后发出\n\n                _this4.$emit('upload', result);\n\n                return _context2.abrupt(\"return\", result);\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n\n    /**\n     * 删除某项\n     * @param {Number|String} id 删除项 id\n     */\n    delItem: function delItem(id) {\n      var itemList = this.itemList,\n          isStable = this.isStable; // 根据id找到对应项\n\n      var index = itemList.findIndex(function (item) {\n        return item.id === id;\n      });\n      var blobUrl = itemList[index].display;\n\n      if (isStable) {\n        // 固定数量图片, 删除后留下空项\n        itemList[index] = createItem();\n        this.itemList = _toConsumableArray(itemList);\n      } else {\n        itemList.splice(index, 1);\n      } // 释放内存\n\n\n      window.URL.revokeObjectURL(blobUrl);\n      this.initItemList(this.itemList);\n    },\n\n    /**\n     * 预览图像\n     * @param {Object} data 需要预览的项的数据\n     * @param {Number} index 索引序号\n     */\n    previewImg: function previewImg(data, index) {\n      var usable = this.itemList.filter(function (item) {\n        return item.status !== 'input';\n      });\n      this.srcList = usable.map(function (item) {\n        return item.display;\n      });\n      this.imageRefs[index].showViewer = true;\n    },\n    setImageRef: function setImageRef(el) {\n      if (el) {\n        this.imageRefs.push(el);\n      }\n    },\n\n    /**\n     * 移动图像位置\n     * @param {Number|String} id 操作项的 id\n     * @param {Number} step 移动的偏移量\n     */\n    move: function move(id, step) {\n      var itemList = this.itemList,\n          isStable = this.isStable; // 找到操作的元素\n\n      var index = itemList.findIndex(function (item) {\n        return item.id === id;\n      }); // 边界检测\n\n      if (index + step < 0 || index + step >= itemList.length) return; // 非固定项时, 不可和最后一项输入换位子\n\n      if (!isStable && index + step === itemList.length - 1) {\n        if (itemList[itemList.length - 1].status === 'input') return;\n      }\n\n      var i = itemList[index];\n      var j = itemList[index + step];\n      itemList[index] = j;\n      itemList[index + step] = i;\n      this.itemList = _toConsumableArray(itemList);\n    },\n\n    /**\n     * 验证上传的图像是否符合要求\n     * @param {LocalFileInfo} imgInfo 图像信息, 包括文件名, 宽高\n     */\n    validateImg: function validateImg(imgInfo) {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var rules, rule, ratio;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                rules = _this5.rules;\n                /** @type ValidateRule */\n\n                // 针对动态规则模式, 获取输入为空时的规则\n                // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n                if (typeof rules === 'function') {\n                  try {\n                    rule = rules(imgInfo);\n                  } catch (err) {\n                    rule = {};\n                  }\n                } else {\n                  rule = rules;\n                }\n\n                if (!(rule.allowAnimated && rule.allowAnimated > 0)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                if (!(imgInfo.isAnimated === null)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                _this5.$message.error('要进行是否动图验证需要配置 \"animated-check\" 属性为 true');\n\n                _context3.next = 11;\n                break;\n\n              case 7:\n                if (!(rule.allowAnimated === 1 && imgInfo.isAnimated)) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u4E3A\\u52A8\\u6001\\u56FE, \\u4E0D\\u5141\\u8BB8\\u4E0A\\u4F20\"));\n\n              case 9:\n                if (!(rule.allowAnimated === 2 && !imgInfo.isAnimated)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u4E3A\\u9759\\u6001\\u56FE, \\u53EA\\u5141\\u8BB8\\u4E0A\\u4F20\\u52A8\\u6001\\u56FE\"));\n\n              case 11:\n                if (!rule.width) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                if (!(imgInfo.width !== rule.width)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u9700\\u4E3A\").concat(rule.width));\n\n              case 14:\n                _context3.next = 20;\n                break;\n\n              case 16:\n                if (!(rule.minWidth && imgInfo.width < rule.minWidth)) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u5C11\\u4E3A\").concat(rule.minWidth));\n\n              case 18:\n                if (!(rule.maxWidth && imgInfo.width > rule.maxWidth)) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u591A\\u4E3A\").concat(rule.maxWidth));\n\n              case 20:\n                if (!rule.height) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                if (!(imgInfo.height !== rule.height)) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u9AD8\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u9700\\u4E3A\").concat(rule.height));\n\n              case 23:\n                _context3.next = 29;\n                break;\n\n              case 25:\n                if (!(rule.minHeight && imgInfo.height < rule.minHeight)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u9AD8\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u5C11\\u4E3A\").concat(rule.minHeight));\n\n              case 27:\n                if (!(rule.maxHeight && imgInfo.height > rule.maxHeight)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u9AD8\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u591A\\u4E3A\").concat(rule.maxHeight));\n\n              case 29:\n                if (!rule.ratio) {\n                  _context3.next = 34;\n                  break;\n                }\n\n                if (Array.isArray(rule.ratio)) {\n                  ratio = rule.ratio[0] / rule.ratio[1];\n                } else {\n                  // eslint-disable-next-line\n                  ratio = rule.ratio;\n                }\n\n                ratio = ratio.toFixed(2);\n\n                if (!((imgInfo.width / imgInfo.height).toFixed(2) !== ratio)) {\n                  _context3.next = 34;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u9AD8\\u6BD4\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u9700\\u4E3A\").concat(ratio));\n\n              case 34:\n                if (!(rule.minSize && imgInfo.size < rule.minSize * ONE_MB)) {\n                  _context3.next = 36;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u6587\\u4EF6\\u5927\\u5C0F\\u6BD4\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u5C11\\u4E3A\").concat(rule.minSize, \"Mb\"));\n\n              case 36:\n                if (!(rule.maxSize && imgInfo.size > rule.maxSize * ONE_MB)) {\n                  _context3.next = 38;\n                  break;\n                }\n\n                throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u6587\\u4EF6\\u5927\\u5C0F\\u6BD4\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u591A\\u4E3A\").concat(rule.maxSize, \"Mb\"));\n\n              case 38:\n                return _context3.abrupt(\"return\", true);\n\n              case 39:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n\n    /**\n     * 选择图像文件后处理, 包括获取图像信息, 验证图像等\n     * @param {Event} e input change 事件对象\n     */\n    handleChange: function handleChange(e) {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        var currentId, autoUpload, files, imgInfoList, cache, handleImg, asyncList, i, _i2;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                currentId = _this6.currentId, autoUpload = _this6.autoUpload;\n                files = e.target.files;\n\n                if (files) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 4:\n                /** 中间步骤缓存, 在出错时用于释放 createObjectURL 的内存 */\n                cache = [];\n                /**\n                 * 处理单个图片, 返回处理成功的图片数据\n                 * @param {File} file 图片文件\n                 */\n\n                handleImg = /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(file) {\n                    var info;\n                    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            _context4.next = 2;\n                            return _this6.getImgInfo(file);\n\n                          case 2:\n                            info = _context4.sent;\n                            cache.push(info); // 验证图像信息\n\n                            _context4.next = 6;\n                            return _this6.validateImg(info);\n\n                          case 6:\n                            return _context4.abrupt(\"return\", info);\n\n                          case 7:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n\n                  return function handleImg(_x) {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                asyncList = [];\n\n                for (i = 0; i < files.length; i += 1) {\n                  asyncList.push(handleImg(files[i]));\n                }\n\n                _context5.prev = 8;\n                _context5.next = 11;\n                return Promise.all(asyncList);\n\n              case 11:\n                imgInfoList = _context5.sent;\n\n                // 设置图片信息\n                _this6.setImgInfo(currentId, imgInfoList); // 开启自动上传\n\n\n                if (autoUpload) {\n                  _this6.itemList.forEach(function (ele) {\n                    _this6.uploadImg(ele);\n                  });\n                }\n\n                _context5.next = 22;\n                break;\n\n              case 16:\n                _context5.prev = 16;\n                _context5.t0 = _context5[\"catch\"](8);\n\n                // 清空缓存\n                for (_i2 = 0; _i2 < cache.length; _i2 += 1) {\n                  window.URL.revokeObjectURL(cache[_i2].localSrc);\n                }\n\n                cache = null;\n                console.error(_context5.t0);\n\n                _this6.$message.error(_context5.t0.message);\n\n              case 22:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[8, 16]]);\n      }))();\n    },\n\n    /**\n     * 根据信息列表设置图像信息\n     * 用户选择图片, 图片通过验证后可获取到图像信息数组\n     * 将这一组图像信息数据设置在 itemList 中\n     * @param {Array<LocalFileInfo>} imgInfoList 需要设置的图像数组\n     * @param {Number|String} id 操作项的 id\n     */\n    setImgInfo: function setImgInfo(currentId) {\n      var imgInfoList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var max = this.max,\n          itemList = this.itemList; // 找到特定图像位置\n\n      var index = this.itemList.findIndex(function (item) {\n        return item.id === currentId;\n      }); // 释放内存\n\n      window.URL.revokeObjectURL(this.itemList[index].display); // 替换图片\n\n      this.itemList[index] = createItem(imgInfoList[0], this.itemList[index]); // 如果需要设置的图像数量大于1, 需要执行追加图片逻辑\n\n      if (imgInfoList.length > 1) {\n        // 最大图片数量限制\n        var l = imgInfoList.length;\n\n        if (this.isStable) {\n          // 固定数量模式, 按次序插入空项\n          for (var i = 0, k = 1; i < max && k < l; i += 1) {\n            if (itemList[i].status === 'input') {\n              this.itemList[i] = createItem(imgInfoList[k]);\n              k += 1;\n            }\n          }\n        } else {\n          var empty = max - itemList.length;\n\n          if (max && l > empty) {\n            l = empty;\n          }\n\n          if (itemList[itemList.length - 1].status === 'input') {\n            this.itemList.pop();\n          }\n\n          for (var _i3 = 1; _i3 <= l; _i3 += 1) {\n            this.itemList.push(createItem(imgInfoList[_i3]));\n          }\n        }\n      } // 初始化图片\n\n\n      this.initItemList(this.itemList);\n    },\n\n    /**\n     * 支持键盘操作\n     * @param {Event} e 键盘事件对象\n     * @param {Number|String} id 操作项的 id\n     */\n    handleKeydown: function handleKeydown(e, id) {\n      if (e.target !== e.currentTarget) return;\n\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick(id);\n      }\n    },\n\n    /**\n     * 处理点击事件, 并转移到文件上传元素\n     * 并记录当前操作元素 id\n     * @param {Number|String} id 操作项的 id\n     */\n    handleClick: function handleClick(id) {\n      if (!this.disabled) {\n        this.currentId = id || '';\n        this.$refs.input.value = null;\n        this.$refs.input.click();\n      }\n    },\n\n    /**\n     * 初始化 itemList\n     * @param {Array} val 初始化的数据数组\n     */\n    initItemList: function initItemList(val) {\n      var max = this.max,\n          isStable = this.isStable,\n          disabled = this.disabled;\n      var result = []; // 初始值不存在情况\n      // 包括初始值不合法\n\n      if (!val || !Array.isArray(val) || val.length === 0) {\n        // 固定数量图像上传, 直接初始化固定数量的上传控件\n        if (isStable) {\n          for (var i = 0; i < max; i += 1) {\n            result.push(createItem());\n          }\n\n          this.itemList = result;\n          return;\n        } // 如果不是固定上传数量, 则仅创建一个空项\n\n\n        result.push(createItem());\n        this.itemList = result;\n        return;\n      } // 存在初始值\n\n\n      for (var _i4 = 0; _i4 < val.length; _i4 += 1) {\n        result.push(createItem(val[_i4]));\n      } // 初始项小于最大数量限制, 并且处于可编辑状态, 并且最后一项不是input\n\n\n      if ((max === 0 || val.length < max) && !disabled && val[val.length - 1].status !== 'input') {\n        // 后面添加空项\n        result.push(createItem());\n      }\n\n      this.itemList = result;\n    },\n\n    /**\n     * 获取图像信息\n     * @param {File} file 文件对象\n     * @returns {LocalFileInfo} 信息对象\n     */\n    getImgInfo: function getImgInfo(file) {\n      var _this7 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var animatedCheck, localSrc, fileType, isAnimated;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                animatedCheck = _this7.animatedCheck;\n                localSrc = window.URL.createObjectURL(file); // 严格检测文件类型\n\n                _context6.next = 4;\n                return getFileType(file);\n\n              case 4:\n                fileType = _context6.sent;\n                // 检测是否是动图\n                isAnimated = null;\n\n                if (!animatedCheck) {\n                  _context6.next = 10;\n                  break;\n                }\n\n                _context6.next = 9;\n                return checkIsAnimated({\n                  file: file,\n                  fileType: fileType,\n                  fileUrl: localSrc\n                });\n\n              case 9:\n                isAnimated = _context6.sent;\n\n              case 10:\n                return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var image = new Image();\n                  image.src = localSrc;\n\n                  image.onload = function () {\n                    /**\n                     * @type {LocalFileInfo}\n                     */\n                    var localFileInfo = {\n                      localSrc: localSrc,\n                      file: file,\n                      width: image.width,\n                      height: image.height,\n                      name: file.name,\n                      size: file.size,\n                      type: fileType === 'unknow' ? file.type : fileType,\n                      lastModified: file.lastModified,\n                      isAnimated: isAnimated\n                    };\n                    resolve(localFileInfo);\n                    image = null;\n                  };\n\n                  image.onerror = function () {\n                    reject(new Error('图像加载失败'));\n                    image = null;\n                  };\n                }));\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n\n    /** 清空全部图片 */\n    clear: function clear() {\n      this.initItemList([]);\n      this.getValue();\n    },\n\n    /** 重置图片数据传入属性 */\n    reset: function reset() {\n      this.initItemList(this.value);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/zhahn/Desktop/未命名文件夹/lin-cms-vue/src/component/base/upload-image/index.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n Component: UploadImgs\n Describe: 多图片上传组件, 附有预览, 排序, 验证等功能\n\ntodo: 使用中间件模式优化信息装载和验证功能\ntodo: 文件判断使用 serveWorker 优化性能\n-->\n\n<template>\n  <div class=\"upload-imgs-container\" v-loading=\"loading\">\n    <div v-for=\"(item, i) in itemList\" :key=\"item.id\">\n      <div v-if=\"item.display\">\n        <div class=\"thumb-item\" :style=\"boxStyle\" v-loading=\"item.loading\">\n          <el-image\n            :fit=\"fit\"\n            :ref=\"setImageRef\"\n            :src=\"item.display\"\n            class=\"thumb-item-img\"\n            :previewSrcList=\"srcList\"\n            style=\"width: 100%; height: 100%\"\n          >\n          </el-image>\n          <div class=\"info\">\n            <i\n              v-if=\"item.file\"\n              class=\"el-icon-upload wait-upload\"\n              @click.prevent.stop=\"delItem(item.id)\"\n              title=\"等待上传\"\n            ></i>\n          </div>\n          <div class=\"control\">\n            <i v-if=\"!disabled\" class=\"el-icon-close del\" @click.prevent.stop=\"delItem(item.id)\" title=\"删除\"></i>\n            <div v-if=\"!disabled\" class=\"preview\" title=\"更换图片\" @click.prevent.stop=\"handleClick(item.id)\">\n              <i class=\"el-icon-edit\"></i>\n            </div>\n            <div class=\"control-bottom\" v-if=\"sortable || preview\">\n              <i\n                v-if=\"sortable && !disabled\"\n                title=\"前移\"\n                class=\"control-bottom-btn el-icon-back\"\n                :class=\"{ disabled: i === 0 }\"\n                @click.stop=\"move(item.id, -1)\"\n              ></i>\n              <i\n                v-if=\"preview\"\n                class=\"control-bottom-btn el-icon-view\"\n                title=\"预览\"\n                style=\"cursor: pointer\"\n                @click.stop=\"previewImg(item, i)\"\n              ></i>\n              <i\n                v-if=\"sortable && !disabled\"\n                title=\"后移\"\n                class=\"control-bottom-btn el-icon-right\"\n                :class=\"{ disabled: i === itemList.length - 1 }\"\n                @click.stop=\"move(item.id, 1)\"\n              ></i>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div v-else>\n        <div\n          class=\"upload-item\"\n          :class=\"{ disabled: disabled }\"\n          :style=\"boxStyle\"\n          @click=\"handleClick(item.id)\"\n          @keydown=\"handleKeydown($event, item.id)\"\n        >\n          <i class=\"el-icon-plus\" style=\"font-size: 3em\"></i>\n          <div v-html=\"rulesTip.join('<br>')\" style=\"margin-top: 1em\"></div>\n        </div>\n      </div>\n    </div>\n    <input\n      ref=\"input\"\n      type=\"file\"\n      :accept=\"accept\"\n      :multiple=\"multiple\"\n      @change=\"handleChange\"\n      class=\"upload-imgs__input\"\n      aria-labelledby=\"Upload images\"\n    />\n  </div>\n</template>\n\n<script>\nimport { post } from '@/lin/plugin/axios'\nimport { getFileType, checkIsAnimated, isEmptyObj, createId } from './utils'\n\n/**\n * 本地图像通过验证后构造的信息对象\n * @typedef {Object<string, number, any>} LocalFileInfo\n * @property {string} localSrc 本地图像预览地址\n * @property {File} file 本地图像文件\n * @property {number} width 宽\n * @property {number} height 高\n * @property {string} name 文件名\n * @property {number} size 文件大小\n * @property {string} type 文件的媒体类型 (MIME)\n * @property {Date} lastModified 文件最后修改时间\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * 初始化的图片如果没有传入字段, 则值为空 null\n * @typedef {Object<string, number>} ReturnItem\n * @property {number|string} id 初始化数据的 id\n * @property {number|string} imgId 图像资源 id\n * @property {string} src 文件相对路径\n * @property {string} display 图像完整地址\n * @property {number} height 高\n * @property {number} width 宽\n * @property {string} fileName 文件名\n * @property {string} fileType 文件的媒体类型 (MIME), 针对部分文件类型做了检测\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * @typedef {Object} ValidateRule\n * @property {array|number} ratio 比例 [宽，高], 或者 宽/高 的数值\n * @property {number} width 宽度必需等于\n * @property {number} height 高度必需等于\n * @property {number} minWidth 最小宽\n * @property {number} minHeight 最小高\n * @property {number} minSize 最小 size（Mb)\n * @property {number} maxSize 最大 size（Mb)\n * @property {number} allowAnimated 是否允许上传动图, 0 不检测, 1 不允许动图, 2 只允许动图. 要检查此项, 需设置属性 animated-check 为 true\n */\n\nconst ONE_KB = 1024\nconst ONE_MB = ONE_KB * 1024\n\n/**\n * 创建项, 如不传入参数则创建空项\n * status 状态转换说明:\n *  - 如果不传入参数, 创建上传空项, status: input\n *  - 如果只传入 data, 不传入 oldData\n *    - data 是本地数据(数据中是否携带id), status: new\n *    - data 不是本地数据(来源可能是初始化或是其他), status 与原状态保持一致, 如果没有原状态就是 init\n *  - data 与 oldData 都传入\n *    - data 为本地数据, oldData 是 input/new, status: new\n *    - data 为本地数据, oldData 是 init/edit, status: edit\n *    - data 不是本地数据, status 与原状态保持一致, 如果没有原状态就是 init\n * @returns {Item}\n */\nfunction createItem(data = null, oldData = {}) {\n  let item = {\n    loading: false,\n    id: createId(),\n    status: 'input', // new/edit/del/init/input\n    src: '', // 图像相对地址\n    display: '', // 图像完整地址, 用于显示\n    imgId: '', // 图像资源 id\n  }\n  // 未传入data, 说明是单纯新建, 单纯新建的值是输入框状态\n  if (!data) {\n    return item\n  }\n  // 判断是否是本地图片\n  if (data.file && !data.id) {\n    if (!isEmptyObj(oldData)) {\n      // 如果旧数据状态是输入框, 则为新图片\n      if (oldData.status === 'input' || oldData.status === 'new') {\n        item.status = 'new'\n      }\n      // 如果旧数据状态是初始化 init, 则为修改\n      if (oldData.status === 'init' || oldData.status === 'edit') {\n        item.status = 'edit'\n      }\n    } else {\n      item.status = 'new'\n    }\n\n    // 本地数据初始化\n    item.id = oldData.id || item.id\n    item.src = ''\n    item.imgId = ''\n    item.display = data.localSrc || item.display\n    item = { ...data, ...item }\n    return item\n  }\n\n  // 存在id, 说明是传入已存在数据\n  item.id = data.id || createId()\n  item.imgId = data.imgId || item.imgId\n  item.src = data.src || item.src\n  item.display = data.display || item.display\n  item.status = data.status || 'init'\n  item = { ...data, ...item }\n  return item\n}\n\n/**\n * 获取范围类型限制的提示文本\n * @param {String} prx 提示前缀\n * @param {Number} min 范围下限\n * @param {Number} max 范围上限\n * @param {String} unit 单位\n */\nfunction getRangeTip(prx, min, max, unit = '') {\n  let str = prx\n  if (min && max) {\n    // 有范围限制\n    str += ` ${min}${unit}~${max}${unit}`\n  } else if (min) {\n    // 只有最小范围\n    str += ` ≥ ${min}${unit}`\n  } else if (max) {\n    // 只有最大范围\n    str += ` ≤ ${max}${unit}`\n  } else {\n    // 无限制\n    str += '无限制'\n  }\n  return str\n}\n\n/** for originUpload: 一次请求最多的文件数量 */\nconst uploadLimit = 10\n/** for originUpload: 文件对象缓存 */\nlet catchData = []\n/** for originUpload: 计时器缓存 */\nlet time\n\nexport default {\n  name: 'UploadImgs',\n  data() {\n    return {\n      srcList: [],\n      itemList: [],\n      imageRefs: [],\n      loading: false,\n      currentId: '', // 正在操作项的id\n      imageInitialIndex: 0,\n    }\n  },\n  props: {\n    /** 每一项宽度 */\n    width: {\n      type: [Number, String],\n      default: 160,\n    },\n    /** 每一项高度 */\n    height: {\n      type: [Number, String],\n      default: 160,\n    },\n    /** 是否开启自动上传 */\n    autoUpload: {\n      type: Boolean,\n      default: true,\n    },\n    /** 初始化数据 */\n    value: {\n      type: Array,\n      default: () => [],\n    },\n    /** 接受的文件类型 */\n    accept: {\n      type: String,\n      default: 'image/*',\n    },\n    /** 最少图片数量 */\n    minNum: {\n      type: Number,\n      default: 0,\n    },\n    /** 最多图片数量, 0 表示无限制 */\n    maxNum: {\n      type: Number,\n      default: 0,\n    },\n    /** 是否可排序 */\n    sortable: {\n      type: Boolean,\n      default: false,\n    },\n    /** 是否可预览 */\n    preview: {\n      type: Boolean,\n      default: true,\n    },\n    /** 是否可以一次多选 */\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n    /** 图像验证规则 */\n    rules: {\n      type: [Object, Function],\n      default: () => ({\n        maxSize: 2,\n      }),\n    },\n    /** 是否禁用, 禁用后只可展示 不可进行编辑操作, 包括: 新增, 修改, 删除, 改变顺序 */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /** 上传前插入方法, 属于高级用法 */\n    beforeUpload: {\n      type: Function,\n      default: null,\n    },\n    /** 重写上传方法, 如果重写则覆盖组件内上传方法 */\n    remoteFuc: {\n      type: Function,\n      default: null,\n    },\n    /** 图像显示模式 */\n    fit: {\n      type: String,\n      default: 'contain',\n    },\n    /** 检测是否是动图 */\n    animatedCheck: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    /** 每项容器样式 */\n    boxStyle() {\n      const { width, height, disabled } = this\n      const style = {}\n      if (typeof width === 'number') {\n        style.width = `${width}px`\n      } else if (typeof width === 'string') {\n        style.width = width\n      }\n      if (typeof height === 'number') {\n        style.height = `${height}px`\n      } else if (typeof height === 'string') {\n        style.height = height\n      }\n      if (disabled) {\n        style.cursor = 'not-allowed'\n      } else {\n        style.cursor = 'pointer'\n      }\n\n      /** 提示字体最大尺寸 */\n      let fontSize = 12\n      /** 每行提示预设 */\n      const maxText = 8\n      if (typeof width === 'number' && width / maxText < fontSize) {\n        fontSize = (width / maxText).toFixed(2)\n      }\n      style.fontSize = `${fontSize}px`\n      style.textAlign = 'center'\n      style.position = 'relative'\n      style.display = 'flex'\n      style.alignItems = 'center'\n      style.justifyContent = 'center'\n      style.overflow = 'hidden'\n      style.lineHeight = '1.3'\n      style.flexDirection = 'column'\n\n      return style\n    },\n    /**\n     * 上传图像数量下限\n     * @returns {Number}\n     */\n    min() {\n      const { minNum } = this\n      return minNum < 0 ? 0 : parseInt(minNum, 10)\n    },\n    /**\n     * 上传图像数量上限\n     * @returns {Number}\n     */\n    max() {\n      const { min, maxNum } = this\n      // 兼容用最大值小于最小值情况\n      return maxNum < min ? min : parseInt(maxNum, 10)\n    },\n    /**\n     * 是否是固定数量(最小等于最大)\n     * @returns {Boolean}\n     */\n    isStable() {\n      const { min, max } = this\n      return max !== 0 && min === max\n    },\n    /** 构造图像规范提示 */\n    rulesTip() {\n      const { rules } = this\n      const tips = []\n\n      /** 图像验证规则 */\n      let basicRule\n      // 针对动态规则模式, 获取输入为空时的规则\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n      if (typeof rules === 'function') {\n        try {\n          basicRule = rules()\n        } catch (err) {\n          basicRule = {}\n        }\n      } else {\n        basicRule = rules || {}\n      }\n\n      // 宽高限制提示语\n      if (basicRule.width && basicRule.height) {\n        // 固定宽高限制\n        tips.push(`宽高 ${basicRule.width}x${basicRule.height}`)\n      } else if (basicRule.width) {\n        // 固定宽限制\n        tips.push(`宽度 ${basicRule.width}`)\n        tips.push(`${getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)}`)\n      } else if (basicRule.height) {\n        // 固定高限制\n        tips.push(`高度 ${basicRule.height}`)\n        tips.push(`${getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)}`)\n      } else {\n        // 宽高都不固定\n        tips.push(`${getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)}`)\n        tips.push(`${getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)}`)\n      }\n\n      // 宽高比限制提示语\n      if (basicRule.ratio) {\n        if (Array.isArray(basicRule.ratio)) {\n          tips.push(`宽高比 ${basicRule.ratio.join(':')}`)\n        } else {\n          tips.push(`宽高比 ${basicRule.ratio}`)\n        }\n      }\n\n      // 文件大小\n      if (basicRule.minSize || basicRule.maxSize) {\n        tips.push(getRangeTip('文件大小', basicRule.minSize, basicRule.maxSize, 'Mb'))\n      }\n\n      // 是否动态图\n      if (basicRule.allowAnimated && basicRule.allowAnimated > 0) {\n        if (basicRule.allowAnimated === 1) {\n          tips.push('不允许上传动图')\n        } else if (basicRule.allowAnimated === 2) {\n          tips.push('只允许上传动图')\n        }\n      }\n\n      return tips\n    },\n  },\n  watch: {\n    /** 初始化值修改时重新初始化, 并且清空当前的编辑状态 */\n    value(val) {\n      // 初始化数据\n      this.initItemList(val)\n    },\n  },\n  mounted() {\n    this.initItemList(this.value)\n  },\n  methods: {\n    /**\n     * 上传缓存中的图片\n     * @param {Array} uploadList 需要上传的缓存集合, 集合中包含回调函数\n     */\n    uploadCatch(uploadList) {\n      const data = {}\n      uploadList.forEach((item, index) => {\n        data[`file_${index}`] = item.img.file\n      })\n      return post('cms/file', data)\n        .then(res => {\n          if (!Array.isArray(res) || res.length === 0) {\n            throw new Error('图像上传失败')\n          }\n\n          const resObj = res.reduce((acc, item) => {\n            acc[item.key] = item\n            return acc\n          }, {})\n\n          uploadList.forEach((item, index) => {\n            const remoteData = resObj[`file_${index}`]\n            item.cb(remoteData)\n          })\n        })\n        .catch(err => {\n          uploadList.forEach(item => {\n            item.cb(false)\n          })\n          let msg = '图像上传失败, 请重试'\n          if (err.message) {\n            // eslint-disable-next-line\n            msg = err.message\n          }\n          console.error(err)\n          this.$message.error(msg)\n        })\n    },\n    /**\n     * 内置上传文件方法, 使用 debounce 优化提交效率\n     * 此处只能使用回调模式, 因为涉及 debounce 处理, promise 不可在外部改变其状态\n     * @param {Object} img 需要上传的数据项\n     * @param {Function} cb 回调函数\n     */\n    originUpload(img, cb) {\n      // 并且一次最多上传文件数量设为可配置\n      // 添加缓存\n      catchData.push({\n        img,\n        cb,\n      })\n\n      // 等于上限, 立即上传\n      if (catchData.length === uploadLimit) {\n        const data = [...catchData]\n        catchData = []\n        clearTimeout(time)\n        time = null\n        return this.uploadCatch(data)\n      }\n\n      // 清除上次一的定时器\n      if (time && catchData.length < uploadLimit) {\n        clearTimeout(time)\n        // 此时修改上一个 promise 状态为resolve\n      }\n\n      // 等待100ms\n      time = setTimeout(() => {\n        this.uploadCatch([...catchData])\n        catchData = []\n        time = null\n      }, 50)\n    },\n    /**\n     * 上传图像文件\n     * @param {Object} 需要上传的项, 包含文化和其它信息\n     */\n    async uploadImg(item) {\n      // 远程结果处理\n      const reduceResult = (imgItem, res) => {\n        // eslint-disable-next-line\n        imgItem.loading = false\n        if (!res) {\n          return\n        }\n        // eslint-disable-next-line\n        imgItem.display = res.url\n        // eslint-disable-next-line\n        imgItem.src = res.path\n        // eslint-disable-next-line\n        imgItem.imgId = res.id\n        // eslint-disable-next-line\n        imgItem.file = null\n        window.URL.revokeObjectURL(imgItem.display)\n      }\n\n      if (item.status === 'input' || !item.file) {\n        return\n      }\n\n      item.loading = true\n      if (this.beforeUpload && typeof this.beforeUpload === 'function') {\n        if (typeof this.beforeUpload === 'function') {\n          const result = await new Promise(resolve => {\n            let beforeUploadResult\n            try {\n              beforeUploadResult = this.beforeUpload(item, data => {\n                resolve(!!data)\n              })\n            } catch (err) {\n              resolve(false)\n            }\n            // promise 模式\n            if (beforeUploadResult != null && typeof beforeUploadResult.then === 'function') {\n              beforeUploadResult\n                .then(remoteData => {\n                  resolve(!!remoteData)\n                })\n                .catch(() => {\n                  resolve(false)\n                })\n            }\n          })\n          if (!result) {\n            reduceResult(item, false)\n            return false\n          }\n        }\n      }\n      // 如果是用户自定义方法\n      // 出于简化 api 的考虑, 只允许单个文件上传, 不进行代理\n      if (this.remoteFuc && typeof this.remoteFuc === 'function') {\n        const result = await new Promise(resolve => {\n          let remoteFucResult\n          try {\n            remoteFucResult = this.remoteFuc(item.file, remoteData => {\n              resolve(remoteData || false)\n            })\n          } catch (err) {\n            this.$message.error('执行自定义上传出错')\n            resolve(false)\n          }\n          // promise 模式\n          if (remoteFucResult != null && typeof remoteFucResult.then === 'function') {\n            remoteFucResult\n              .then(remoteData => {\n                resolve(remoteData || false)\n              })\n              .catch(() => {\n                resolve(false)\n              })\n          }\n        })\n        reduceResult(item, result)\n        if (!result) {\n          return false\n        }\n        return item\n      }\n\n      // 使用内置上传\n      return new Promise(resolve => {\n        this.originUpload(item, data => {\n          reduceResult(item, data)\n          if (!data) {\n            resolve(false)\n          } else {\n            resolve(item)\n          }\n        })\n      })\n    },\n    /**\n     * 获取当前组件数据\n     */\n    async getValue() {\n      const { itemList, isStable, min } = this\n\n      // 检查是否有不符合要求的空项\n      const l = isStable ? itemList.length : itemList.length - 1\n      for (let i = 0; i < l; i += 1) {\n        if (itemList[i].status === 'input') {\n          this.$message.error('当前存在未选择图片, 请全部选择')\n          return false\n        }\n      }\n      if (l < min) {\n        this.$message.error(`至少选择${min}张图片`)\n        return false\n      }\n      // 提取需要上传文件\n      const asyncList = []\n\n      for (let i = 0; i < itemList.length; i += 1) {\n        // 跳过上传组件\n        if (itemList[i].status !== 'input') {\n          if (!itemList[i].file) {\n            asyncList.push(Promise.resolve(itemList[i]))\n          } else {\n            // 上传文件后获取对应key值\n            asyncList.push(this.uploadImg(itemList[i]))\n          }\n        }\n      }\n      const imgInfoList = await Promise.all(asyncList)\n      // const imgInfoList = this.itemList.filter(item => (item.status !== 'input'))\n\n      // 检查是否有上传失败的图像\n      // 如果有失败的上传, 则返回错误\n      if (imgInfoList.some(item => !item)) {\n        return false\n      }\n\n      // 如无错误, 表示图像都以上传, 开始构造数据\n      /**\n       * @type {array<ReturnItem>}\n       */\n      const result = imgInfoList.map(item => {\n        /** @type {ReturnItem} */\n        const val = {\n          id: item.status === 'new' ? '' : item.id,\n          imgId: item.imgId || null,\n          src: item.src || null,\n          display: item.display,\n          width: item.width || null,\n          height: item.height || null,\n          fileSize: item.size || null,\n          fileName: item.name || null,\n          fileType: item.type || null,\n          isAnimated: item.isAnimated || null,\n        }\n        return val\n      })\n      // 获取数据成功后发出\n      this.$emit('upload', result)\n      return result\n    },\n    /**\n     * 删除某项\n     * @param {Number|String} id 删除项 id\n     */\n    delItem(id) {\n      const { itemList, isStable } = this\n      // 根据id找到对应项\n      const index = itemList.findIndex(item => item.id === id)\n      const blobUrl = itemList[index].display\n      if (isStable) {\n        // 固定数量图片, 删除后留下空项\n        itemList[index] = createItem()\n        this.itemList = [...itemList]\n      } else {\n        itemList.splice(index, 1)\n      }\n      // 释放内存\n      window.URL.revokeObjectURL(blobUrl)\n      this.initItemList(this.itemList)\n    },\n    /**\n     * 预览图像\n     * @param {Object} data 需要预览的项的数据\n     * @param {Number} index 索引序号\n     */\n    previewImg(data, index) {\n      const usable = this.itemList.filter(item => item.status !== 'input')\n      this.srcList = usable.map(item => item.display)\n      this.imageRefs[index].showViewer = true\n    },\n    setImageRef(el) {\n      if (el) {\n        this.imageRefs.push(el)\n      }\n    },\n    /**\n     * 移动图像位置\n     * @param {Number|String} id 操作项的 id\n     * @param {Number} step 移动的偏移量\n     */\n    move(id, step) {\n      const { itemList, isStable } = this\n      // 找到操作的元素\n      const index = itemList.findIndex(item => item.id === id)\n      // 边界检测\n      if (index + step < 0 || index + step >= itemList.length) return\n      // 非固定项时, 不可和最后一项输入换位子\n      if (!isStable && index + step === itemList.length - 1) {\n        if (itemList[itemList.length - 1].status === 'input') return\n      }\n      const i = itemList[index]\n      const j = itemList[index + step]\n      itemList[index] = j\n      itemList[index + step] = i\n      this.itemList = [...itemList]\n    },\n    /**\n     * 验证上传的图像是否符合要求\n     * @param {LocalFileInfo} imgInfo 图像信息, 包括文件名, 宽高\n     */\n    async validateImg(imgInfo) {\n      const { rules } = this\n      /** @type ValidateRule */\n      let rule\n      // 针对动态规则模式, 获取输入为空时的规则\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n      if (typeof rules === 'function') {\n        try {\n          rule = rules(imgInfo)\n        } catch (err) {\n          rule = {}\n        }\n      } else {\n        rule = rules\n      }\n\n      if (rule.allowAnimated && rule.allowAnimated > 0) {\n        if (imgInfo.isAnimated === null) {\n          this.$message.error('要进行是否动图验证需要配置 \"animated-check\" 属性为 true')\n        } else {\n          if (rule.allowAnimated === 1 && imgInfo.isAnimated) {\n            throw new Error(`\"${imgInfo.name}\"为动态图, 不允许上传`)\n          }\n          if (rule.allowAnimated === 2 && !imgInfo.isAnimated) {\n            throw new Error(`\"${imgInfo.name}\"为静态图, 只允许上传动态图`)\n          }\n        }\n      }\n\n      // 宽高限制\n      if (rule.width) {\n        if (imgInfo.width !== rule.width) {\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 需为${rule.width}`)\n        }\n      } else {\n        if (rule.minWidth && imgInfo.width < rule.minWidth) {\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 至少为${rule.minWidth}`)\n        }\n        if (rule.maxWidth && imgInfo.width > rule.maxWidth) {\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 至多为${rule.maxWidth}`)\n        }\n      }\n      if (rule.height) {\n        if (imgInfo.height !== rule.height) {\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 需为${rule.height}`)\n        }\n      } else {\n        if (rule.minHeight && imgInfo.height < rule.minHeight) {\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 至少为${rule.minHeight}`)\n        }\n        if (rule.maxHeight && imgInfo.height > rule.maxHeight) {\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 至多为${rule.maxHeight}`)\n        }\n      }\n\n      // 宽高比限制提示语\n      if (rule.ratio) {\n        let ratio\n        if (Array.isArray(rule.ratio)) {\n          ratio = rule.ratio[0] / rule.ratio[1]\n        } else {\n          // eslint-disable-next-line\n          ratio = rule.ratio\n        }\n        ratio = ratio.toFixed(2)\n        if ((imgInfo.width / imgInfo.height).toFixed(2) !== ratio) {\n          throw new Error(`\"${imgInfo.name}\"图像宽高比不符合要求, 需为${ratio}`)\n        }\n      }\n\n      // 文件大小\n      if (rule.minSize && imgInfo.size < rule.minSize * ONE_MB) {\n        throw new Error(`\"${imgInfo.name}\"图像文件大小比不符合要求, 至少为${rule.minSize}Mb`)\n      }\n      if (rule.maxSize && imgInfo.size > rule.maxSize * ONE_MB) {\n        throw new Error(`\"${imgInfo.name}\"图像文件大小比不符合要求, 至多为${rule.maxSize}Mb`)\n      }\n\n      return true\n    },\n    /**\n     * 选择图像文件后处理, 包括获取图像信息, 验证图像等\n     * @param {Event} e input change 事件对象\n     */\n    async handleChange(e) {\n      const { currentId, autoUpload } = this\n      const { files } = e.target\n      let imgInfoList\n\n      if (!files) return\n      /** 中间步骤缓存, 在出错时用于释放 createObjectURL 的内存 */\n      let cache = []\n      /**\n       * 处理单个图片, 返回处理成功的图片数据\n       * @param {File} file 图片文件\n       */\n      const handleImg = async file => {\n        // 获取图像信息\n        const info = await this.getImgInfo(file)\n        cache.push(info)\n        // 验证图像信息\n        await this.validateImg(info)\n        return info\n      }\n\n      const asyncList = []\n      for (let i = 0; i < files.length; i += 1) {\n        asyncList.push(handleImg(files[i]))\n      }\n      try {\n        imgInfoList = await Promise.all(asyncList)\n        // 设置图片信息\n        this.setImgInfo(currentId, imgInfoList)\n        // 开启自动上传\n        if (autoUpload) {\n          this.itemList.forEach(ele => {\n            this.uploadImg(ele)\n          })\n        }\n      } catch (err) {\n        // 清空缓存\n        for (let i = 0; i < cache.length; i += 1) {\n          window.URL.revokeObjectURL(cache[i].localSrc)\n        }\n        cache = null\n        console.error(err)\n        this.$message.error(err.message)\n      }\n    },\n    /**\n     * 根据信息列表设置图像信息\n     * 用户选择图片, 图片通过验证后可获取到图像信息数组\n     * 将这一组图像信息数据设置在 itemList 中\n     * @param {Array<LocalFileInfo>} imgInfoList 需要设置的图像数组\n     * @param {Number|String} id 操作项的 id\n     */\n    setImgInfo(currentId, imgInfoList = []) {\n      const { max, itemList } = this\n      // 找到特定图像位置\n      const index = this.itemList.findIndex(item => item.id === currentId)\n      // 释放内存\n      window.URL.revokeObjectURL(this.itemList[index].display)\n      // 替换图片\n      this.itemList[index] = createItem(imgInfoList[0], this.itemList[index])\n\n      // 如果需要设置的图像数量大于1, 需要执行追加图片逻辑\n      if (imgInfoList.length > 1) {\n        // 最大图片数量限制\n        let l = imgInfoList.length\n        if (this.isStable) {\n          // 固定数量模式, 按次序插入空项\n          for (let i = 0, k = 1; i < max && k < l; i += 1) {\n            if (itemList[i].status === 'input') {\n              this.itemList[i] = createItem(imgInfoList[k])\n              k += 1\n            }\n          }\n        } else {\n          const empty = max - itemList.length\n          if (max && l > empty) {\n            l = empty\n          }\n          if (itemList[itemList.length - 1].status === 'input') {\n            this.itemList.pop()\n          }\n          for (let i = 1; i <= l; i += 1) {\n            this.itemList.push(createItem(imgInfoList[i]))\n          }\n        }\n      }\n\n      // 初始化图片\n      this.initItemList(this.itemList)\n    },\n    /**\n     * 支持键盘操作\n     * @param {Event} e 键盘事件对象\n     * @param {Number|String} id 操作项的 id\n     */\n    handleKeydown(e, id) {\n      if (e.target !== e.currentTarget) return\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick(id)\n      }\n    },\n    /**\n     * 处理点击事件, 并转移到文件上传元素\n     * 并记录当前操作元素 id\n     * @param {Number|String} id 操作项的 id\n     */\n    handleClick(id) {\n      if (!this.disabled) {\n        this.currentId = id || ''\n        this.$refs.input.value = null\n        this.$refs.input.click()\n      }\n    },\n    /**\n     * 初始化 itemList\n     * @param {Array} val 初始化的数据数组\n     */\n    initItemList(val) {\n      const { max, isStable, disabled } = this\n      const result = []\n\n      // 初始值不存在情况\n      // 包括初始值不合法\n      if (!val || !Array.isArray(val) || val.length === 0) {\n        // 固定数量图像上传, 直接初始化固定数量的上传控件\n        if (isStable) {\n          for (let i = 0; i < max; i += 1) {\n            result.push(createItem())\n          }\n          this.itemList = result\n          return\n        }\n        // 如果不是固定上传数量, 则仅创建一个空项\n        result.push(createItem())\n        this.itemList = result\n        return\n      }\n\n      // 存在初始值\n      for (let i = 0; i < val.length; i += 1) {\n        result.push(createItem(val[i]))\n      }\n      // 初始项小于最大数量限制, 并且处于可编辑状态, 并且最后一项不是input\n      if ((max === 0 || val.length < max) && !disabled && val[val.length - 1].status !== 'input') {\n        // 后面添加空项\n        result.push(createItem())\n      }\n      this.itemList = result\n    },\n    /**\n     * 获取图像信息\n     * @param {File} file 文件对象\n     * @returns {LocalFileInfo} 信息对象\n     */\n    async getImgInfo(file) {\n      const { animatedCheck } = this\n      const localSrc = window.URL.createObjectURL(file)\n      // 严格检测文件类型\n      const fileType = await getFileType(file)\n      // 检测是否是动图\n      let isAnimated = null\n      if (animatedCheck) {\n        isAnimated = await checkIsAnimated({ file, fileType, fileUrl: localSrc })\n      }\n      return new Promise((resolve, reject) => {\n        let image = new Image()\n        image.src = localSrc\n        image.onload = () => {\n          /**\n           * @type {LocalFileInfo}\n           */\n          const localFileInfo = {\n            localSrc,\n            file,\n            width: image.width,\n            height: image.height,\n            name: file.name,\n            size: file.size,\n            type: fileType === 'unknow' ? file.type : fileType,\n            lastModified: file.lastModified,\n            isAnimated,\n          }\n          resolve(localFileInfo)\n          image = null\n        }\n        image.onerror = () => {\n          reject(new Error('图像加载失败'))\n          image = null\n        }\n      })\n    },\n    /** 清空全部图片 */\n    clear() {\n      this.initItemList([])\n      this.getValue()\n    },\n    /** 重置图片数据传入属性 */\n    reset() {\n      this.initItemList(this.value)\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.upload-imgs-container {\n  display: flex;\n  flex-wrap: wrap;\n\n  &:focus {\n    outline: none;\n  }\n\n  .upload-item,\n  .thumb-item {\n    border: 1px dashed #d9d9d9;\n    border-radius: 3px;\n    transition: all 0.1s;\n    color: #666666;\n    margin-right: 1em;\n    margin-bottom: 1em;\n\n    &.disabled {\n      color: #ababab;\n    }\n\n    &:not(.disabled):hover {\n      border-color: #3963bc;\n      color: #3963bc;\n    }\n  }\n\n  .thumb-item {\n    :v-deep(.el-image-viewer__canvas) {\n      position: absolute;\n      max-width: 800px;\n      left: 50%;\n      transform: translateX(-50%);\n    }\n    .info {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      transition: all 0.3s;\n      transition-delay: 0.1s;\n\n      .wait-upload {\n        background: #ffcb71;\n        color: white;\n        position: absolute;\n        display: inline-block;\n        width: 1.7em;\n        height: 1.5em;\n        top: 0;\n        right: 0;\n        border-radius: 0 0 0 1.4em;\n        transition: all 0.1s;\n\n        &::before {\n          font-size: 1.4em;\n          position: absolute;\n          right: -1px;\n          transform: scale(0.7);\n        }\n      }\n    }\n\n    .control {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      opacity: 0;\n      background-color: rgba(0, 0, 0, 0.3);\n      transition: all 0.3s;\n      transition-delay: 0.1s;\n\n      .del {\n        background: #f4516c;\n        color: white;\n        position: absolute;\n        display: inline-block;\n        width: 1.7em;\n        height: 1.5em;\n        top: 0;\n        right: 0;\n        opacity: 0;\n        border-radius: 0 0 0 1.4em;\n        transition: all 0.1s;\n\n        &::before {\n          font-size: 1.4em;\n          position: absolute;\n          right: -1px;\n          transform: scale(0.7);\n        }\n\n        &:hover {\n          transform: translate(-0.5em, 0.4em) scale(1.5);\n        }\n      }\n\n      .preview {\n        color: white;\n        font-size: 2em;\n        transition: all 0.2s;\n\n        &:hover {\n          transform: scale(1.2);\n        }\n      }\n\n      .control-bottom {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        color: white;\n        background-color: rgba(0, 0, 0, 0.3);\n        font-size: 1.5em;\n        display: flex;\n        justify-content: space-around;\n        transform: translate(0, 100%);\n        transition: all 0.2s;\n        transition-delay: 0.1s;\n        padding: 5px 0;\n\n        .control-bottom-btn {\n          transform: all 0.2s;\n\n          &.disabled {\n            color: #ababab;\n            cursor: not-allowed;\n          }\n\n          &:not(.disabled):hover {\n            transform: scale(1.2);\n          }\n        }\n      }\n    }\n\n    &:hover {\n      .control {\n        opacity: 1;\n      }\n\n      .del {\n        opacity: 1;\n      }\n\n      .control-bottom {\n        transform: translate(0, 0);\n      }\n    }\n  }\n\n  .upload-imgs__input {\n    display: none;\n  }\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}