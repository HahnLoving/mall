{"ast":null,"code":"import _asyncToGenerator from \"/Users/zhahn/Desktop/\\u672A\\u547D\\u540D\\u6587\\u4EF6\\u5939/lin-cms-vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/zhahn/Desktop/\\u672A\\u547D\\u540D\\u6587\\u4EF6\\u5939/lin-cms-vue/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/zhahn/Desktop/\\u672A\\u547D\\u540D\\u6587\\u4EF6\\u5939/lin-cms-vue/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"regenerator-runtime/runtime.js\";\n\n/* eslint-disable class-methods-use-this */\nimport _axios, { get, put, _delete } from '@/lin/plugin/axios'; // 我们通过 class 这样的语法糖使模型这个概念更加具象化，其优点：耦合性低、可维护性。\n\nvar Book = /*#__PURE__*/function () {\n  function Book() {\n    _classCallCheck(this, Book);\n  }\n\n  _createClass(Book, [{\n    key: \"createBook\",\n    value: // constructor() {}\n    // 类中的方法可以代表一个用户行为\n    function () {\n      var _createBook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", _axios({\n                  method: 'post',\n                  url: 'v1/book',\n                  data: data\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function createBook(_x) {\n        return _createBook.apply(this, arguments);\n      }\n\n      return createBook;\n    }() // 在这里通过 async await 语法糖让代码同步执行\n    // 1. await 一定要搭配 async 来使用\n    // 2. await 后面跟的是一个 Promise 对象\n\n  }, {\n    key: \"getBook\",\n    value: function () {\n      var _getBook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return get(\"v1/book/\".concat(id));\n\n              case 2:\n                res = _context2.sent;\n                return _context2.abrupt(\"return\", res);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getBook(_x2) {\n        return _getBook.apply(this, arguments);\n      }\n\n      return getBook;\n    }()\n  }, {\n    key: \"editBook\",\n    value: function () {\n      var _editBook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id, info) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return put(\"v1/book/\".concat(id), info);\n\n              case 2:\n                res = _context3.sent;\n                return _context3.abrupt(\"return\", res);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function editBook(_x3, _x4) {\n        return _editBook.apply(this, arguments);\n      }\n\n      return editBook;\n    }()\n  }, {\n    key: \"deleteBook\",\n    value: function () {\n      var _deleteBook = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(id) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _delete(\"v1/book/\".concat(id));\n\n              case 2:\n                res = _context4.sent;\n                return _context4.abrupt(\"return\", res);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function deleteBook(_x5) {\n        return _deleteBook.apply(this, arguments);\n      }\n\n      return deleteBook;\n    }()\n  }, {\n    key: \"getBooks\",\n    value: function () {\n      var _getBooks = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", _axios({\n                  method: 'get',\n                  url: 'v1/book',\n                  handleError: true\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getBooks() {\n        return _getBooks.apply(this, arguments);\n      }\n\n      return getBooks;\n    }()\n  }]);\n\n  return Book;\n}();\n\nexport default new Book();","map":{"version":3,"sources":["/Users/zhahn/Desktop/未命名文件夹/lin-cms-vue/src/model/book.js"],"names":["_axios","get","put","_delete","Book","data","method","url","id","res","info","handleError"],"mappings":";;;;;AAAA;AACA,OAAOA,MAAP,IAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,OAA3B,QAA0C,oBAA1C,C,CAEA;;IACMC,I;;;;;;;WACJ;AAEA;;gFACA,iBAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,iDACSL,MAAM,CAAC;AACZM,kBAAAA,MAAM,EAAE,MADI;AAEZC,kBAAAA,GAAG,EAAE,SAFO;AAGZF,kBAAAA,IAAI,EAAJA;AAHY,iBAAD,CADf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAQA;AACA;AACA;;;;;6EACA,kBAAcG,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBP,GAAG,mBAAYO,EAAZ,EADvB;;AAAA;AACQC,gBAAAA,GADR;AAAA,kDAESA,GAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8EAKA,kBAAeD,EAAf,EAAmBE,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBR,GAAG,mBAAYM,EAAZ,GAAkBE,IAAlB,CADvB;;AAAA;AACQD,gBAAAA,GADR;AAAA,kDAESA,GAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;gFAKA,kBAAiBD,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACoBL,OAAO,mBAAYK,EAAZ,EAD3B;;AAAA;AACQC,gBAAAA,GADR;AAAA,kDAESA,GAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8EAKA;AAAA;AAAA;AAAA;AAAA;AAAA,kDACST,MAAM,CAAC;AACZM,kBAAAA,MAAM,EAAE,KADI;AAEZC,kBAAAA,GAAG,EAAE,SAFO;AAGZI,kBAAAA,WAAW,EAAE;AAHD,iBAAD,CADf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AASF,eAAe,IAAIP,IAAJ,EAAf","sourcesContent":["/* eslint-disable class-methods-use-this */\nimport _axios, { get, put, _delete } from '@/lin/plugin/axios'\n\n// 我们通过 class 这样的语法糖使模型这个概念更加具象化，其优点：耦合性低、可维护性。\nclass Book {\n  // constructor() {}\n\n  // 类中的方法可以代表一个用户行为\n  async createBook(data) {\n    return _axios({\n      method: 'post',\n      url: 'v1/book',\n      data,\n    })\n  }\n\n  // 在这里通过 async await 语法糖让代码同步执行\n  // 1. await 一定要搭配 async 来使用\n  // 2. await 后面跟的是一个 Promise 对象\n  async getBook(id) {\n    const res = await get(`v1/book/${id}`)\n    return res\n  }\n\n  async editBook(id, info) {\n    const res = await put(`v1/book/${id}`, info)\n    return res\n  }\n\n  async deleteBook(id) {\n    const res = await _delete(`v1/book/${id}`)\n    return res\n  }\n\n  async getBooks() {\n    return _axios({\n      method: 'get',\n      url: 'v1/book',\n      handleError: true,\n    })\n  }\n}\n\nexport default new Book()\n"]},"metadata":{},"sourceType":"module"}