{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, withKeys as _withKeys, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\n\nvar _hoisted_1 = /*#__PURE__*/_createTextVNode(\"添加标签\");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_tag = _resolveComponent(\"el-tag\");\n\n  var _component_el_input = _resolveComponent(\"el-input\");\n\n  var _component_el_button = _resolveComponent(\"el-button\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_tag, {\n    key: _ctx.tag,\n    closable: \"\",\n    \"disable-transitions\": false,\n    onClose: _cache[0] || (_cache[0] = function ($event) {\n      return $options.handleClose(_ctx.tag);\n    })\n  }, {\n    default: _withCtx(function () {\n      return [_createTextVNode(_toDisplayString(_ctx.tag), 1\n      /* TEXT */\n      )];\n    }),\n    _: 1\n    /* STABLE */\n\n  }), $data.inputVisible ? (_openBlock(), _createBlock(_component_el_input, {\n    key: 0,\n    class: \"input-new-tag\",\n    modelValue: $data.inputValue,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n      return $data.inputValue = $event;\n    }),\n    ref: \"saveTagInput\",\n    size: \"small\",\n    onKeyup: _withKeys($options.handleInputConfirm, [\"enter\", \"native\"]),\n    onBlur: $options.handleInputConfirm\n  }, null, 8\n  /* PROPS */\n  , [\"modelValue\", \"onKeyup\", \"onBlur\"])) : (_openBlock(), _createBlock(_component_el_button, {\n    key: 1,\n    class: \"button-new-tag\",\n    size: \"small\",\n    onClick: $options.showInput\n  }, {\n    default: _withCtx(function () {\n      return [_hoisted_1];\n    }),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]))]);\n}","map":{"version":3,"sources":["/Users/zhahn/Documents/Hahn/自考/项目/mall_cms/src/component/tag/DynamicTag.vue"],"names":[],"mappings":";;+CAgB6E,M;;;;;;;;;uBAf3E,mBAAA,CAgBM,KAhBN,EAgBM,IAhBN,EAgBM,CAfJ,YAAA,CAEW,iBAFX,EAEW;AAFF,IAAA,GAAG,EAAE,IAAA,CAAA,GAEH;AAF4B,IAAA,QAAQ,EAAR,EAE5B;AAFsC,2BAAqB,KAE3D;AAFmE,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA,UAAA,MAAA;AAAA,aAAE,QAAA,CAAA,WAAA,CAAY,IAAA,CAAA,GAAZ,CAAF;AAAA,KAAA;AAExE,GAFX,E;sBAAuG;AAAA,aAErG,C,kCADA,IAAA,CAAA,G,GAAG;AAAA;OACH,CAFqG;AAAA,K;;;;GAAvG,CAeI,EATI,KAAA,CAAA,Y,kBAFR,YAAA,CAQY,mBARZ,EAQY;UAAA;AAPV,IAAA,KAAK,EAAC,eAOI;gBALD,KAAA,CAAA,UAKC;;aALD,KAAA,CAAA,U,GAAU,M;MAKT;AAJV,IAAA,GAAG,EAAC,cAIM;AAHV,IAAA,IAAI,EAAC,OAGK;AAFT,IAAA,OAAK,EAAA,SAAA,CAAe,QAAA,CAAA,kBAAf,EAAiC,CAAA,OAAA,EAAA,QAAA,CAAjC,CAEI;AADT,IAAA,MAAI,EAAE,QAAA,CAAA;AACG,GARZ,E,IAAA,E;;AAAA,I,mCAAA,C,mBAUA,YAAA,CAAyF,oBAAzF,EAAyF;UAAA;AAAvE,IAAA,KAAK,EAAC,gBAAiE;AAAhD,IAAA,IAAI,EAAC,OAA2C;AAAlC,IAAA,OAAK,EAAE,QAAA,CAAA;AAA2B,GAAzF,E;sBAAyE;AAAA,aAAI,C,UAAA,CAAJ;AAAA,K;;;;GAAzE,E;;AAAA,I,WAAA,C,CACI,CAhBN,C","sourcesContent":["<template>\n  <div>\n    <el-tag :key=\"tag\" v-for=\"dynamicTags\" closable :disable-transitions=\"false\" @close=\"handleClose(tag)\">{{\n      tag\n    }}</el-tag>\n\n    <el-input\n      class=\"input-new-tag\"\n      v-if=\"inputVisible\"\n      v-model=\"inputValue\"\n      ref=\"saveTagInput\"\n      size=\"small\"\n      @keyup.enter.native=\"handleInputConfirm\"\n      @blur=\"handleInputConfirm\"\n    ></el-input>\n\n    <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput\">添加标签</el-button>\n  </div>\n</template>\n\n<script>\nexport default {\n  model: {\n    prop: 'dynamicTags',\n    event: 'change',\n  },\n  props: {\n    dynamicTags: {\n      type: Array,\n      default: () => [],\n    },\n  },\n  data() {\n    return {\n      inputVisible: false,\n      inputValue: '',\n    }\n  },\n  methods: {\n    handleClose(tag) {\n      this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1)\n    },\n\n    showInput() {\n      this.inputVisible = true\n      this.$nextTick(() => {\n        this.$refs.saveTagInput.$refs.input.focus()\n      })\n    },\n    handleInputConfirm() {\n      // eslint-disable-next-line\n      const inputValue = this.inputValue\n      if (inputValue) {\n        this.dynamicTags.push(inputValue)\n      }\n      this.$emit('change', this.dynamicTags)\n      this.inputVisible = false\n      this.inputValue = ''\n    },\n  },\n}\n</script>\n\n<style>\n.el-tag + .el-tag {\n  margin-left: 10px;\n}\n\n.button-new-tag {\n  margin-left: 10px;\n  height: 32px;\n  padding-top: 0;\n  padding-bottom: 0;\n  text-align: center;\n}\n\n.input-new-tag {\n  width: 90px;\n  margin-left: 10px;\n  vertical-align: bottom;\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}