{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, resolveDirective as _resolveDirective, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-4db9e6b5\"), n = n(), _popScopeId(), n;\n};\n\nvar _hoisted_1 = {\n  class: \"upload-imgs-container\"\n};\nvar _hoisted_2 = {\n  key: 0\n};\nvar _hoisted_3 = {\n  class: \"info\"\n};\nvar _hoisted_4 = [\"onClick\"];\nvar _hoisted_5 = {\n  class: \"control\"\n};\nvar _hoisted_6 = [\"onClick\"];\nvar _hoisted_7 = [\"onClick\"];\n\nvar _hoisted_8 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"i\", {\n    class: \"el-icon-edit\"\n  }, null, -1\n  /* HOISTED */\n  );\n});\n\nvar _hoisted_9 = [_hoisted_8];\nvar _hoisted_10 = {\n  key: 2,\n  class: \"control-bottom\"\n};\nvar _hoisted_11 = [\"onClick\"];\nvar _hoisted_12 = [\"onClick\"];\nvar _hoisted_13 = [\"onClick\"];\nvar _hoisted_14 = {\n  key: 1\n};\nvar _hoisted_15 = [\"onClick\", \"onKeydown\"];\n\nvar _hoisted_16 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"i\", {\n    class: \"el-icon-plus\",\n    style: {\n      \"font-size\": \"3em\"\n    }\n  }, null, -1\n  /* HOISTED */\n  );\n});\n\nvar _hoisted_17 = [\"innerHTML\"];\nvar _hoisted_18 = [\"accept\", \"multiple\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_image = _resolveComponent(\"el-image\");\n\n  var _directive_loading = _resolveDirective(\"loading\");\n\n  return _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.itemList, function (item, i) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: item.id\n    }, [item.display ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"div\", {\n      class: \"thumb-item\",\n      style: _normalizeStyle($options.boxStyle)\n    }, [_createVNode(_component_el_image, {\n      fit: $props.fit,\n      ref: $options.setImageRef,\n      src: item.display,\n      class: \"thumb-item-img\",\n      previewSrcList: $data.srcList,\n      style: {\n        \"width\": \"100%\",\n        \"height\": \"100%\"\n      }\n    }, null, 8\n    /* PROPS */\n    , [\"fit\", \"src\", \"previewSrcList\"]), _createElementVNode(\"div\", _hoisted_3, [item.file ? (_openBlock(), _createElementBlock(\"i\", {\n      key: 0,\n      class: \"el-icon-upload wait-upload\",\n      onClick: _withModifiers(function ($event) {\n        return $options.delItem(item.id);\n      }, [\"prevent\", \"stop\"]),\n      title: \"等待上传\"\n    }, null, 8\n    /* PROPS */\n    , _hoisted_4)) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_5, [!$props.disabled ? (_openBlock(), _createElementBlock(\"i\", {\n      key: 0,\n      class: \"el-icon-close del\",\n      onClick: _withModifiers(function ($event) {\n        return $options.delItem(item.id);\n      }, [\"prevent\", \"stop\"]),\n      title: \"删除\"\n    }, null, 8\n    /* PROPS */\n    , _hoisted_6)) : _createCommentVNode(\"v-if\", true), !$props.disabled ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 1,\n      class: \"preview\",\n      title: \"更换图片\",\n      onClick: _withModifiers(function ($event) {\n        return $options.handleClick(item.id);\n      }, [\"prevent\", \"stop\"])\n    }, _hoisted_9, 8\n    /* PROPS */\n    , _hoisted_7)) : _createCommentVNode(\"v-if\", true), $props.sortable || $props.preview ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [$props.sortable && !$props.disabled ? (_openBlock(), _createElementBlock(\"i\", {\n      key: 0,\n      title: \"前移\",\n      class: _normalizeClass([\"control-bottom-btn el-icon-back\", {\n        disabled: i === 0\n      }]),\n      onClick: _withModifiers(function ($event) {\n        return $options.move(item.id, -1);\n      }, [\"stop\"])\n    }, null, 10\n    /* CLASS, PROPS */\n    , _hoisted_11)) : _createCommentVNode(\"v-if\", true), $props.preview ? (_openBlock(), _createElementBlock(\"i\", {\n      key: 1,\n      class: \"control-bottom-btn el-icon-view\",\n      title: \"预览\",\n      style: {\n        \"cursor\": \"pointer\"\n      },\n      onClick: _withModifiers(function ($event) {\n        return $options.previewImg(item, i);\n      }, [\"stop\"])\n    }, null, 8\n    /* PROPS */\n    , _hoisted_12)) : _createCommentVNode(\"v-if\", true), $props.sortable && !$props.disabled ? (_openBlock(), _createElementBlock(\"i\", {\n      key: 2,\n      title: \"后移\",\n      class: _normalizeClass([\"control-bottom-btn el-icon-right\", {\n        disabled: i === $data.itemList.length - 1\n      }]),\n      onClick: _withModifiers(function ($event) {\n        return $options.move(item.id, 1);\n      }, [\"stop\"])\n    }, null, 10\n    /* CLASS, PROPS */\n    , _hoisted_13)) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)])], 4\n    /* STYLE */\n    ), [[_directive_loading, item.loading]])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_14, [_createElementVNode(\"div\", {\n      class: _normalizeClass([\"upload-item\", {\n        disabled: $props.disabled\n      }]),\n      style: _normalizeStyle($options.boxStyle),\n      onClick: function onClick($event) {\n        return $options.handleClick(item.id);\n      },\n      onKeydown: function onKeydown($event) {\n        return $options.handleKeydown($event, item.id);\n      }\n    }, [_hoisted_16, _createElementVNode(\"div\", {\n      innerHTML: $options.rulesTip.join('<br>'),\n      style: {\n        \"margin-top\": \"1em\"\n      }\n    }, null, 8\n    /* PROPS */\n    , _hoisted_17)], 46\n    /* CLASS, STYLE, PROPS, HYDRATE_EVENTS */\n    , _hoisted_15)]))]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), _createElementVNode(\"input\", {\n    ref: \"input\",\n    type: \"file\",\n    accept: $props.accept,\n    multiple: $props.multiple,\n    onChange: _cache[0] || (_cache[0] = function () {\n      return $options.handleChange && $options.handleChange.apply($options, arguments);\n    }),\n    class: \"upload-imgs__input\",\n    \"aria-labelledby\": \"Upload images\"\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_18)], 512\n  /* NEED_PATCH */\n  )), [[_directive_loading, $data.loading]]);\n}","map":{"version":3,"sources":["/Users/zhahn/Documents/Hahn/自考/mall/mall_cms/src/component/base/upload-image/index.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n Component: UploadImgs\n Describe: 多图片上传组件, 附有预览, 排序, 验证等功能\n\ntodo: 使用中间件模式优化信息装载和验证功能\ntodo: 文件判断使用 serveWorker 优化性能\n-->\n\n<template>\n  <div class=\"upload-imgs-container\" v-loading=\"loading\">\n    <div v-for=\"(item, i) in itemList\" :key=\"item.id\">\n      <div v-if=\"item.display\">\n        <div class=\"thumb-item\" :style=\"boxStyle\" v-loading=\"item.loading\">\n          <el-image\n            :fit=\"fit\"\n            :ref=\"setImageRef\"\n            :src=\"item.display\"\n            class=\"thumb-item-img\"\n            :previewSrcList=\"srcList\"\n            style=\"width: 100%; height: 100%\"\n          >\n          </el-image>\n          <div class=\"info\">\n            <i\n              v-if=\"item.file\"\n              class=\"el-icon-upload wait-upload\"\n              @click.prevent.stop=\"delItem(item.id)\"\n              title=\"等待上传\"\n            ></i>\n          </div>\n          <div class=\"control\">\n            <i v-if=\"!disabled\" class=\"el-icon-close del\" @click.prevent.stop=\"delItem(item.id)\" title=\"删除\"></i>\n            <div v-if=\"!disabled\" class=\"preview\" title=\"更换图片\" @click.prevent.stop=\"handleClick(item.id)\">\n              <i class=\"el-icon-edit\"></i>\n            </div>\n            <div class=\"control-bottom\" v-if=\"sortable || preview\">\n              <i\n                v-if=\"sortable && !disabled\"\n                title=\"前移\"\n                class=\"control-bottom-btn el-icon-back\"\n                :class=\"{ disabled: i === 0 }\"\n                @click.stop=\"move(item.id, -1)\"\n              ></i>\n              <i\n                v-if=\"preview\"\n                class=\"control-bottom-btn el-icon-view\"\n                title=\"预览\"\n                style=\"cursor: pointer\"\n                @click.stop=\"previewImg(item, i)\"\n              ></i>\n              <i\n                v-if=\"sortable && !disabled\"\n                title=\"后移\"\n                class=\"control-bottom-btn el-icon-right\"\n                :class=\"{ disabled: i === itemList.length - 1 }\"\n                @click.stop=\"move(item.id, 1)\"\n              ></i>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div v-else>\n        <div\n          class=\"upload-item\"\n          :class=\"{ disabled: disabled }\"\n          :style=\"boxStyle\"\n          @click=\"handleClick(item.id)\"\n          @keydown=\"handleKeydown($event, item.id)\"\n        >\n          <i class=\"el-icon-plus\" style=\"font-size: 3em\"></i>\n          <div v-html=\"rulesTip.join('<br>')\" style=\"margin-top: 1em\"></div>\n        </div>\n      </div>\n    </div>\n    <input\n      ref=\"input\"\n      type=\"file\"\n      :accept=\"accept\"\n      :multiple=\"multiple\"\n      @change=\"handleChange\"\n      class=\"upload-imgs__input\"\n      aria-labelledby=\"Upload images\"\n    />\n  </div>\n</template>\n\n<script>\nimport { post } from '@/lin/plugin/axios'\nimport { getFileType, checkIsAnimated, isEmptyObj, createId } from './utils'\n\n/**\n * 本地图像通过验证后构造的信息对象\n * @typedef {Object<string, number, any>} LocalFileInfo\n * @property {string} localSrc 本地图像预览地址\n * @property {File} file 本地图像文件\n * @property {number} width 宽\n * @property {number} height 高\n * @property {string} name 文件名\n * @property {number} size 文件大小\n * @property {string} type 文件的媒体类型 (MIME)\n * @property {Date} lastModified 文件最后修改时间\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * 初始化的图片如果没有传入字段, 则值为空 null\n * @typedef {Object<string, number>} ReturnItem\n * @property {number|string} id 初始化数据的 id\n * @property {number|string} imgId 图像资源 id\n * @property {string} src 文件相对路径\n * @property {string} display 图像完整地址\n * @property {number} height 高\n * @property {number} width 宽\n * @property {string} fileName 文件名\n * @property {string} fileType 文件的媒体类型 (MIME), 针对部分文件类型做了检测\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * @typedef {Object} ValidateRule\n * @property {array|number} ratio 比例 [宽，高], 或者 宽/高 的数值\n * @property {number} width 宽度必需等于\n * @property {number} height 高度必需等于\n * @property {number} minWidth 最小宽\n * @property {number} minHeight 最小高\n * @property {number} minSize 最小 size（Mb)\n * @property {number} maxSize 最大 size（Mb)\n * @property {number} allowAnimated 是否允许上传动图, 0 不检测, 1 不允许动图, 2 只允许动图. 要检查此项, 需设置属性 animated-check 为 true\n */\n\nconst ONE_KB = 1024\nconst ONE_MB = ONE_KB * 1024\n\n/**\n * 创建项, 如不传入参数则创建空项\n * status 状态转换说明:\n *  - 如果不传入参数, 创建上传空项, status: input\n *  - 如果只传入 data, 不传入 oldData\n *    - data 是本地数据(数据中是否携带id), status: new\n *    - data 不是本地数据(来源可能是初始化或是其他), status 与原状态保持一致, 如果没有原状态就是 init\n *  - data 与 oldData 都传入\n *    - data 为本地数据, oldData 是 input/new, status: new\n *    - data 为本地数据, oldData 是 init/edit, status: edit\n *    - data 不是本地数据, status 与原状态保持一致, 如果没有原状态就是 init\n * @returns {Item}\n */\nfunction createItem(data = null, oldData = {}) {\n  let item = {\n    loading: false,\n    id: createId(),\n    status: 'input', // new/edit/del/init/input\n    src: '', // 图像相对地址\n    display: '', // 图像完整地址, 用于显示\n    imgId: '', // 图像资源 id\n  }\n  // 未传入data, 说明是单纯新建, 单纯新建的值是输入框状态\n  if (!data) {\n    return item\n  }\n  // 判断是否是本地图片\n  if (data.file && !data.id) {\n    if (!isEmptyObj(oldData)) {\n      // 如果旧数据状态是输入框, 则为新图片\n      if (oldData.status === 'input' || oldData.status === 'new') {\n        item.status = 'new'\n      }\n      // 如果旧数据状态是初始化 init, 则为修改\n      if (oldData.status === 'init' || oldData.status === 'edit') {\n        item.status = 'edit'\n      }\n    } else {\n      item.status = 'new'\n    }\n\n    // 本地数据初始化\n    item.id = oldData.id || item.id\n    item.src = ''\n    item.imgId = ''\n    item.display = data.localSrc || item.display\n    item = { ...data, ...item }\n    return item\n  }\n\n  // 存在id, 说明是传入已存在数据\n  item.id = data.id || createId()\n  item.imgId = data.imgId || item.imgId\n  item.src = data.src || item.src\n  item.display = data.display || item.display\n  item.status = data.status || 'init'\n  item = { ...data, ...item }\n  return item\n}\n\n/**\n * 获取范围类型限制的提示文本\n * @param {String} prx 提示前缀\n * @param {Number} min 范围下限\n * @param {Number} max 范围上限\n * @param {String} unit 单位\n */\nfunction getRangeTip(prx, min, max, unit = '') {\n  let str = prx\n  if (min && max) {\n    // 有范围限制\n    str += ` ${min}${unit}~${max}${unit}`\n  } else if (min) {\n    // 只有最小范围\n    str += ` ≥ ${min}${unit}`\n  } else if (max) {\n    // 只有最大范围\n    str += ` ≤ ${max}${unit}`\n  } else {\n    // 无限制\n    str += '无限制'\n  }\n  return str\n}\n\n/** for originUpload: 一次请求最多的文件数量 */\nconst uploadLimit = 10\n/** for originUpload: 文件对象缓存 */\nlet catchData = []\n/** for originUpload: 计时器缓存 */\nlet time\n\nexport default {\n  name: 'UploadImgs',\n  data() {\n    return {\n      srcList: [],\n      itemList: [],\n      imageRefs: [],\n      loading: false,\n      currentId: '', // 正在操作项的id\n      imageInitialIndex: 0,\n    }\n  },\n  props: {\n    /** 每一项宽度 */\n    width: {\n      type: [Number, String],\n      default: 160,\n    },\n    /** 每一项高度 */\n    height: {\n      type: [Number, String],\n      default: 160,\n    },\n    /** 是否开启自动上传 */\n    autoUpload: {\n      type: Boolean,\n      default: true,\n    },\n    /** 初始化数据 */\n    value: {\n      type: Array,\n      default: () => [],\n    },\n    /** 接受的文件类型 */\n    accept: {\n      type: String,\n      default: 'image/*',\n    },\n    /** 最少图片数量 */\n    minNum: {\n      type: Number,\n      default: 0,\n    },\n    /** 最多图片数量, 0 表示无限制 */\n    maxNum: {\n      type: Number,\n      default: 0,\n    },\n    /** 是否可排序 */\n    sortable: {\n      type: Boolean,\n      default: false,\n    },\n    /** 是否可预览 */\n    preview: {\n      type: Boolean,\n      default: true,\n    },\n    /** 是否可以一次多选 */\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n    /** 图像验证规则 */\n    rules: {\n      type: [Object, Function],\n      default: () => ({\n        maxSize: 2,\n      }),\n    },\n    /** 是否禁用, 禁用后只可展示 不可进行编辑操作, 包括: 新增, 修改, 删除, 改变顺序 */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /** 上传前插入方法, 属于高级用法 */\n    beforeUpload: {\n      type: Function,\n      default: null,\n    },\n    /** 重写上传方法, 如果重写则覆盖组件内上传方法 */\n    remoteFuc: {\n      type: Function,\n      default: null,\n    },\n    /** 图像显示模式 */\n    fit: {\n      type: String,\n      default: 'contain',\n    },\n    /** 检测是否是动图 */\n    animatedCheck: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    /** 每项容器样式 */\n    boxStyle() {\n      const { width, height, disabled } = this\n      const style = {}\n      if (typeof width === 'number') {\n        style.width = `${width}px`\n      } else if (typeof width === 'string') {\n        style.width = width\n      }\n      if (typeof height === 'number') {\n        style.height = `${height}px`\n      } else if (typeof height === 'string') {\n        style.height = height\n      }\n      if (disabled) {\n        style.cursor = 'not-allowed'\n      } else {\n        style.cursor = 'pointer'\n      }\n\n      /** 提示字体最大尺寸 */\n      let fontSize = 12\n      /** 每行提示预设 */\n      const maxText = 8\n      if (typeof width === 'number' && width / maxText < fontSize) {\n        fontSize = (width / maxText).toFixed(2)\n      }\n      style.fontSize = `${fontSize}px`\n      style.textAlign = 'center'\n      style.position = 'relative'\n      style.display = 'flex'\n      style.alignItems = 'center'\n      style.justifyContent = 'center'\n      style.overflow = 'hidden'\n      style.lineHeight = '1.3'\n      style.flexDirection = 'column'\n\n      return style\n    },\n    /**\n     * 上传图像数量下限\n     * @returns {Number}\n     */\n    min() {\n      const { minNum } = this\n      return minNum < 0 ? 0 : parseInt(minNum, 10)\n    },\n    /**\n     * 上传图像数量上限\n     * @returns {Number}\n     */\n    max() {\n      const { min, maxNum } = this\n      // 兼容用最大值小于最小值情况\n      return maxNum < min ? min : parseInt(maxNum, 10)\n    },\n    /**\n     * 是否是固定数量(最小等于最大)\n     * @returns {Boolean}\n     */\n    isStable() {\n      const { min, max } = this\n      return max !== 0 && min === max\n    },\n    /** 构造图像规范提示 */\n    rulesTip() {\n      const { rules } = this\n      const tips = []\n\n      /** 图像验证规则 */\n      let basicRule\n      // 针对动态规则模式, 获取输入为空时的规则\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n      if (typeof rules === 'function') {\n        try {\n          basicRule = rules()\n        } catch (err) {\n          basicRule = {}\n        }\n      } else {\n        basicRule = rules || {}\n      }\n\n      // 宽高限制提示语\n      if (basicRule.width && basicRule.height) {\n        // 固定宽高限制\n        tips.push(`宽高 ${basicRule.width}x${basicRule.height}`)\n      } else if (basicRule.width) {\n        // 固定宽限制\n        tips.push(`宽度 ${basicRule.width}`)\n        tips.push(`${getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)}`)\n      } else if (basicRule.height) {\n        // 固定高限制\n        tips.push(`高度 ${basicRule.height}`)\n        tips.push(`${getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)}`)\n      } else {\n        // 宽高都不固定\n        tips.push(`${getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)}`)\n        tips.push(`${getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)}`)\n      }\n\n      // 宽高比限制提示语\n      if (basicRule.ratio) {\n        if (Array.isArray(basicRule.ratio)) {\n          tips.push(`宽高比 ${basicRule.ratio.join(':')}`)\n        } else {\n          tips.push(`宽高比 ${basicRule.ratio}`)\n        }\n      }\n\n      // 文件大小\n      if (basicRule.minSize || basicRule.maxSize) {\n        tips.push(getRangeTip('文件大小', basicRule.minSize, basicRule.maxSize, 'Mb'))\n      }\n\n      // 是否动态图\n      if (basicRule.allowAnimated && basicRule.allowAnimated > 0) {\n        if (basicRule.allowAnimated === 1) {\n          tips.push('不允许上传动图')\n        } else if (basicRule.allowAnimated === 2) {\n          tips.push('只允许上传动图')\n        }\n      }\n\n      return tips\n    },\n  },\n  watch: {\n    /** 初始化值修改时重新初始化, 并且清空当前的编辑状态 */\n    value(val) {\n      // 初始化数据\n      this.initItemList(val)\n    },\n  },\n  mounted() {\n    this.initItemList(this.value)\n  },\n  methods: {\n    /**\n     * 上传缓存中的图片\n     * @param {Array} uploadList 需要上传的缓存集合, 集合中包含回调函数\n     */\n    uploadCatch(uploadList) {\n      const data = {}\n      uploadList.forEach((item, index) => {\n        data[`file_${index}`] = item.img.file\n      })\n      return post('cms/file', data)\n        .then(res => {\n          if (!Array.isArray(res) || res.length === 0) {\n            throw new Error('图像上传失败')\n          }\n\n          const resObj = res.reduce((acc, item) => {\n            acc[item.key] = item\n            return acc\n          }, {})\n\n          uploadList.forEach((item, index) => {\n            const remoteData = resObj[`file_${index}`]\n            item.cb(remoteData)\n          })\n        })\n        .catch(err => {\n          uploadList.forEach(item => {\n            item.cb(false)\n          })\n          let msg = '图像上传失败, 请重试'\n          if (err.message) {\n            // eslint-disable-next-line\n            msg = err.message\n          }\n          console.error(err)\n          this.$message.error(msg)\n        })\n    },\n    /**\n     * 内置上传文件方法, 使用 debounce 优化提交效率\n     * 此处只能使用回调模式, 因为涉及 debounce 处理, promise 不可在外部改变其状态\n     * @param {Object} img 需要上传的数据项\n     * @param {Function} cb 回调函数\n     */\n    originUpload(img, cb) {\n      // 并且一次最多上传文件数量设为可配置\n      // 添加缓存\n      catchData.push({\n        img,\n        cb,\n      })\n\n      // 等于上限, 立即上传\n      if (catchData.length === uploadLimit) {\n        const data = [...catchData]\n        catchData = []\n        clearTimeout(time)\n        time = null\n        return this.uploadCatch(data)\n      }\n\n      // 清除上次一的定时器\n      if (time && catchData.length < uploadLimit) {\n        clearTimeout(time)\n        // 此时修改上一个 promise 状态为resolve\n      }\n\n      // 等待100ms\n      time = setTimeout(() => {\n        this.uploadCatch([...catchData])\n        catchData = []\n        time = null\n      }, 50)\n    },\n    /**\n     * 上传图像文件\n     * @param {Object} 需要上传的项, 包含文化和其它信息\n     */\n    async uploadImg(item) {\n      // 远程结果处理\n      const reduceResult = (imgItem, res) => {\n        // eslint-disable-next-line\n        imgItem.loading = false\n        if (!res) {\n          return\n        }\n        // eslint-disable-next-line\n        imgItem.display = res.url\n        // eslint-disable-next-line\n        imgItem.src = res.path\n        // eslint-disable-next-line\n        imgItem.imgId = res.id\n        // eslint-disable-next-line\n        imgItem.file = null\n        window.URL.revokeObjectURL(imgItem.display)\n      }\n\n      if (item.status === 'input' || !item.file) {\n        return\n      }\n\n      item.loading = true\n      if (this.beforeUpload && typeof this.beforeUpload === 'function') {\n        if (typeof this.beforeUpload === 'function') {\n          const result = await new Promise(resolve => {\n            let beforeUploadResult\n            try {\n              beforeUploadResult = this.beforeUpload(item, data => {\n                resolve(!!data)\n              })\n            } catch (err) {\n              resolve(false)\n            }\n            // promise 模式\n            if (beforeUploadResult != null && typeof beforeUploadResult.then === 'function') {\n              beforeUploadResult\n                .then(remoteData => {\n                  resolve(!!remoteData)\n                })\n                .catch(() => {\n                  resolve(false)\n                })\n            }\n          })\n          if (!result) {\n            reduceResult(item, false)\n            return false\n          }\n        }\n      }\n      // 如果是用户自定义方法\n      // 出于简化 api 的考虑, 只允许单个文件上传, 不进行代理\n      if (this.remoteFuc && typeof this.remoteFuc === 'function') {\n        const result = await new Promise(resolve => {\n          let remoteFucResult\n          try {\n            remoteFucResult = this.remoteFuc(item.file, remoteData => {\n              resolve(remoteData || false)\n            })\n          } catch (err) {\n            this.$message.error('执行自定义上传出错')\n            resolve(false)\n          }\n          // promise 模式\n          if (remoteFucResult != null && typeof remoteFucResult.then === 'function') {\n            remoteFucResult\n              .then(remoteData => {\n                resolve(remoteData || false)\n              })\n              .catch(() => {\n                resolve(false)\n              })\n          }\n        })\n        reduceResult(item, result)\n        if (!result) {\n          return false\n        }\n        return item\n      }\n\n      // 使用内置上传\n      return new Promise(resolve => {\n        this.originUpload(item, data => {\n          reduceResult(item, data)\n          if (!data) {\n            resolve(false)\n          } else {\n            resolve(item)\n          }\n        })\n      })\n    },\n    /**\n     * 获取当前组件数据\n     */\n    async getValue() {\n      const { itemList, isStable, min } = this\n\n      // 检查是否有不符合要求的空项\n      const l = isStable ? itemList.length : itemList.length - 1\n      for (let i = 0; i < l; i += 1) {\n        if (itemList[i].status === 'input') {\n          this.$message.error('当前存在未选择图片, 请全部选择')\n          return false\n        }\n      }\n      if (l < min) {\n        this.$message.error(`至少选择${min}张图片`)\n        return false\n      }\n      // 提取需要上传文件\n      const asyncList = []\n\n      for (let i = 0; i < itemList.length; i += 1) {\n        // 跳过上传组件\n        if (itemList[i].status !== 'input') {\n          if (!itemList[i].file) {\n            asyncList.push(Promise.resolve(itemList[i]))\n          } else {\n            // 上传文件后获取对应key值\n            asyncList.push(this.uploadImg(itemList[i]))\n          }\n        }\n      }\n      const imgInfoList = await Promise.all(asyncList)\n      // const imgInfoList = this.itemList.filter(item => (item.status !== 'input'))\n\n      // 检查是否有上传失败的图像\n      // 如果有失败的上传, 则返回错误\n      if (imgInfoList.some(item => !item)) {\n        return false\n      }\n\n      // 如无错误, 表示图像都以上传, 开始构造数据\n      /**\n       * @type {array<ReturnItem>}\n       */\n      const result = imgInfoList.map(item => {\n        /** @type {ReturnItem} */\n        const val = {\n          id: item.status === 'new' ? '' : item.id,\n          imgId: item.imgId || null,\n          src: item.src || null,\n          display: item.display,\n          width: item.width || null,\n          height: item.height || null,\n          fileSize: item.size || null,\n          fileName: item.name || null,\n          fileType: item.type || null,\n          isAnimated: item.isAnimated || null,\n        }\n        return val\n      })\n      // 获取数据成功后发出\n      this.$emit('upload', result)\n      return result\n    },\n    /**\n     * 删除某项\n     * @param {Number|String} id 删除项 id\n     */\n    delItem(id) {\n      const { itemList, isStable } = this\n      // 根据id找到对应项\n      const index = itemList.findIndex(item => item.id === id)\n      const blobUrl = itemList[index].display\n      if (isStable) {\n        // 固定数量图片, 删除后留下空项\n        itemList[index] = createItem()\n        this.itemList = [...itemList]\n      } else {\n        itemList.splice(index, 1)\n      }\n      // 释放内存\n      window.URL.revokeObjectURL(blobUrl)\n      this.initItemList(this.itemList)\n    },\n    /**\n     * 预览图像\n     * @param {Object} data 需要预览的项的数据\n     * @param {Number} index 索引序号\n     */\n    previewImg(data, index) {\n      const usable = this.itemList.filter(item => item.status !== 'input')\n      this.srcList = usable.map(item => item.display)\n      this.imageRefs[index].showViewer = true\n    },\n    setImageRef(el) {\n      if (el) {\n        this.imageRefs.push(el)\n      }\n    },\n    /**\n     * 移动图像位置\n     * @param {Number|String} id 操作项的 id\n     * @param {Number} step 移动的偏移量\n     */\n    move(id, step) {\n      const { itemList, isStable } = this\n      // 找到操作的元素\n      const index = itemList.findIndex(item => item.id === id)\n      // 边界检测\n      if (index + step < 0 || index + step >= itemList.length) return\n      // 非固定项时, 不可和最后一项输入换位子\n      if (!isStable && index + step === itemList.length - 1) {\n        if (itemList[itemList.length - 1].status === 'input') return\n      }\n      const i = itemList[index]\n      const j = itemList[index + step]\n      itemList[index] = j\n      itemList[index + step] = i\n      this.itemList = [...itemList]\n    },\n    /**\n     * 验证上传的图像是否符合要求\n     * @param {LocalFileInfo} imgInfo 图像信息, 包括文件名, 宽高\n     */\n    async validateImg(imgInfo) {\n      const { rules } = this\n      /** @type ValidateRule */\n      let rule\n      // 针对动态规则模式, 获取输入为空时的规则\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n      if (typeof rules === 'function') {\n        try {\n          rule = rules(imgInfo)\n        } catch (err) {\n          rule = {}\n        }\n      } else {\n        rule = rules\n      }\n\n      if (rule.allowAnimated && rule.allowAnimated > 0) {\n        if (imgInfo.isAnimated === null) {\n          this.$message.error('要进行是否动图验证需要配置 \"animated-check\" 属性为 true')\n        } else {\n          if (rule.allowAnimated === 1 && imgInfo.isAnimated) {\n            throw new Error(`\"${imgInfo.name}\"为动态图, 不允许上传`)\n          }\n          if (rule.allowAnimated === 2 && !imgInfo.isAnimated) {\n            throw new Error(`\"${imgInfo.name}\"为静态图, 只允许上传动态图`)\n          }\n        }\n      }\n\n      // 宽高限制\n      if (rule.width) {\n        if (imgInfo.width !== rule.width) {\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 需为${rule.width}`)\n        }\n      } else {\n        if (rule.minWidth && imgInfo.width < rule.minWidth) {\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 至少为${rule.minWidth}`)\n        }\n        if (rule.maxWidth && imgInfo.width > rule.maxWidth) {\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 至多为${rule.maxWidth}`)\n        }\n      }\n      if (rule.height) {\n        if (imgInfo.height !== rule.height) {\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 需为${rule.height}`)\n        }\n      } else {\n        if (rule.minHeight && imgInfo.height < rule.minHeight) {\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 至少为${rule.minHeight}`)\n        }\n        if (rule.maxHeight && imgInfo.height > rule.maxHeight) {\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 至多为${rule.maxHeight}`)\n        }\n      }\n\n      // 宽高比限制提示语\n      if (rule.ratio) {\n        let ratio\n        if (Array.isArray(rule.ratio)) {\n          ratio = rule.ratio[0] / rule.ratio[1]\n        } else {\n          // eslint-disable-next-line\n          ratio = rule.ratio\n        }\n        ratio = ratio.toFixed(2)\n        if ((imgInfo.width / imgInfo.height).toFixed(2) !== ratio) {\n          throw new Error(`\"${imgInfo.name}\"图像宽高比不符合要求, 需为${ratio}`)\n        }\n      }\n\n      // 文件大小\n      if (rule.minSize && imgInfo.size < rule.minSize * ONE_MB) {\n        throw new Error(`\"${imgInfo.name}\"图像文件大小比不符合要求, 至少为${rule.minSize}Mb`)\n      }\n      if (rule.maxSize && imgInfo.size > rule.maxSize * ONE_MB) {\n        throw new Error(`\"${imgInfo.name}\"图像文件大小比不符合要求, 至多为${rule.maxSize}Mb`)\n      }\n\n      return true\n    },\n    /**\n     * 选择图像文件后处理, 包括获取图像信息, 验证图像等\n     * @param {Event} e input change 事件对象\n     */\n    async handleChange(e) {\n      const { currentId, autoUpload } = this\n      const { files } = e.target\n      let imgInfoList\n\n      if (!files) return\n      /** 中间步骤缓存, 在出错时用于释放 createObjectURL 的内存 */\n      let cache = []\n      /**\n       * 处理单个图片, 返回处理成功的图片数据\n       * @param {File} file 图片文件\n       */\n      const handleImg = async file => {\n        // 获取图像信息\n        const info = await this.getImgInfo(file)\n        cache.push(info)\n        // 验证图像信息\n        await this.validateImg(info)\n        return info\n      }\n\n      const asyncList = []\n      for (let i = 0; i < files.length; i += 1) {\n        asyncList.push(handleImg(files[i]))\n      }\n      try {\n        imgInfoList = await Promise.all(asyncList)\n        // 设置图片信息\n        this.setImgInfo(currentId, imgInfoList)\n        // 开启自动上传\n        if (autoUpload) {\n          this.itemList.forEach(ele => {\n            this.uploadImg(ele)\n          })\n        }\n      } catch (err) {\n        // 清空缓存\n        for (let i = 0; i < cache.length; i += 1) {\n          window.URL.revokeObjectURL(cache[i].localSrc)\n        }\n        cache = null\n        console.error(err)\n        this.$message.error(err.message)\n      }\n    },\n    /**\n     * 根据信息列表设置图像信息\n     * 用户选择图片, 图片通过验证后可获取到图像信息数组\n     * 将这一组图像信息数据设置在 itemList 中\n     * @param {Array<LocalFileInfo>} imgInfoList 需要设置的图像数组\n     * @param {Number|String} id 操作项的 id\n     */\n    setImgInfo(currentId, imgInfoList = []) {\n      const { max, itemList } = this\n      // 找到特定图像位置\n      const index = this.itemList.findIndex(item => item.id === currentId)\n      // 释放内存\n      window.URL.revokeObjectURL(this.itemList[index].display)\n      // 替换图片\n      this.itemList[index] = createItem(imgInfoList[0], this.itemList[index])\n\n      // 如果需要设置的图像数量大于1, 需要执行追加图片逻辑\n      if (imgInfoList.length > 1) {\n        // 最大图片数量限制\n        let l = imgInfoList.length\n        if (this.isStable) {\n          // 固定数量模式, 按次序插入空项\n          for (let i = 0, k = 1; i < max && k < l; i += 1) {\n            if (itemList[i].status === 'input') {\n              this.itemList[i] = createItem(imgInfoList[k])\n              k += 1\n            }\n          }\n        } else {\n          const empty = max - itemList.length\n          if (max && l > empty) {\n            l = empty\n          }\n          if (itemList[itemList.length - 1].status === 'input') {\n            this.itemList.pop()\n          }\n          for (let i = 1; i <= l; i += 1) {\n            this.itemList.push(createItem(imgInfoList[i]))\n          }\n        }\n      }\n\n      // 初始化图片\n      this.initItemList(this.itemList)\n    },\n    /**\n     * 支持键盘操作\n     * @param {Event} e 键盘事件对象\n     * @param {Number|String} id 操作项的 id\n     */\n    handleKeydown(e, id) {\n      if (e.target !== e.currentTarget) return\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick(id)\n      }\n    },\n    /**\n     * 处理点击事件, 并转移到文件上传元素\n     * 并记录当前操作元素 id\n     * @param {Number|String} id 操作项的 id\n     */\n    handleClick(id) {\n      if (!this.disabled) {\n        this.currentId = id || ''\n        this.$refs.input.value = null\n        this.$refs.input.click()\n      }\n    },\n    /**\n     * 初始化 itemList\n     * @param {Array} val 初始化的数据数组\n     */\n    initItemList(val) {\n      const { max, isStable, disabled } = this\n      const result = []\n\n      // 初始值不存在情况\n      // 包括初始值不合法\n      if (!val || !Array.isArray(val) || val.length === 0) {\n        // 固定数量图像上传, 直接初始化固定数量的上传控件\n        if (isStable) {\n          for (let i = 0; i < max; i += 1) {\n            result.push(createItem())\n          }\n          this.itemList = result\n          return\n        }\n        // 如果不是固定上传数量, 则仅创建一个空项\n        result.push(createItem())\n        this.itemList = result\n        return\n      }\n\n      // 存在初始值\n      for (let i = 0; i < val.length; i += 1) {\n        result.push(createItem(val[i]))\n      }\n      // 初始项小于最大数量限制, 并且处于可编辑状态, 并且最后一项不是input\n      if ((max === 0 || val.length < max) && !disabled && val[val.length - 1].status !== 'input') {\n        // 后面添加空项\n        result.push(createItem())\n      }\n      this.itemList = result\n    },\n    /**\n     * 获取图像信息\n     * @param {File} file 文件对象\n     * @returns {LocalFileInfo} 信息对象\n     */\n    async getImgInfo(file) {\n      const { animatedCheck } = this\n      const localSrc = window.URL.createObjectURL(file)\n      // 严格检测文件类型\n      const fileType = await getFileType(file)\n      // 检测是否是动图\n      let isAnimated = null\n      if (animatedCheck) {\n        isAnimated = await checkIsAnimated({ file, fileType, fileUrl: localSrc })\n      }\n      return new Promise((resolve, reject) => {\n        let image = new Image()\n        image.src = localSrc\n        image.onload = () => {\n          /**\n           * @type {LocalFileInfo}\n           */\n          const localFileInfo = {\n            localSrc,\n            file,\n            width: image.width,\n            height: image.height,\n            name: file.name,\n            size: file.size,\n            type: fileType === 'unknow' ? file.type : fileType,\n            lastModified: file.lastModified,\n            isAnimated,\n          }\n          resolve(localFileInfo)\n          image = null\n        }\n        image.onerror = () => {\n          reject(new Error('图像加载失败'))\n          image = null\n        }\n      })\n    },\n    /** 清空全部图片 */\n    clear() {\n      this.initItemList([])\n      this.getValue()\n    },\n    /** 重置图片数据传入属性 */\n    reset() {\n      this.initItemList(this.value)\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.upload-imgs-container {\n  display: flex;\n  flex-wrap: wrap;\n\n  &:focus {\n    outline: none;\n  }\n\n  .upload-item,\n  .thumb-item {\n    border: 1px dashed #d9d9d9;\n    border-radius: 3px;\n    transition: all 0.1s;\n    color: #666666;\n    margin-right: 1em;\n    margin-bottom: 1em;\n\n    &.disabled {\n      color: #ababab;\n    }\n\n    &:not(.disabled):hover {\n      border-color: #3963bc;\n      color: #3963bc;\n    }\n  }\n\n  .thumb-item {\n    :v-deep(.el-image-viewer__canvas) {\n      position: absolute;\n      max-width: 800px;\n      left: 50%;\n      transform: translateX(-50%);\n    }\n    .info {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      transition: all 0.3s;\n      transition-delay: 0.1s;\n\n      .wait-upload {\n        background: #ffcb71;\n        color: white;\n        position: absolute;\n        display: inline-block;\n        width: 1.7em;\n        height: 1.5em;\n        top: 0;\n        right: 0;\n        border-radius: 0 0 0 1.4em;\n        transition: all 0.1s;\n\n        &::before {\n          font-size: 1.4em;\n          position: absolute;\n          right: -1px;\n          transform: scale(0.7);\n        }\n      }\n    }\n\n    .control {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      opacity: 0;\n      background-color: rgba(0, 0, 0, 0.3);\n      transition: all 0.3s;\n      transition-delay: 0.1s;\n\n      .del {\n        background: #f4516c;\n        color: white;\n        position: absolute;\n        display: inline-block;\n        width: 1.7em;\n        height: 1.5em;\n        top: 0;\n        right: 0;\n        opacity: 0;\n        border-radius: 0 0 0 1.4em;\n        transition: all 0.1s;\n\n        &::before {\n          font-size: 1.4em;\n          position: absolute;\n          right: -1px;\n          transform: scale(0.7);\n        }\n\n        &:hover {\n          transform: translate(-0.5em, 0.4em) scale(1.5);\n        }\n      }\n\n      .preview {\n        color: white;\n        font-size: 2em;\n        transition: all 0.2s;\n\n        &:hover {\n          transform: scale(1.2);\n        }\n      }\n\n      .control-bottom {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        color: white;\n        background-color: rgba(0, 0, 0, 0.3);\n        font-size: 1.5em;\n        display: flex;\n        justify-content: space-around;\n        transform: translate(0, 100%);\n        transition: all 0.2s;\n        transition-delay: 0.1s;\n        padding: 5px 0;\n\n        .control-bottom-btn {\n          transform: all 0.2s;\n\n          &.disabled {\n            color: #ababab;\n            cursor: not-allowed;\n          }\n\n          &:not(.disabled):hover {\n            transform: scale(1.2);\n          }\n        }\n      }\n    }\n\n    &:hover {\n      .control {\n        opacity: 1;\n      }\n\n      .del {\n        opacity: 1;\n      }\n\n      .control-bottom {\n        transform: translate(0, 0);\n      }\n    }\n  }\n\n  .upload-imgs__input {\n    display: none;\n  }\n}\n</style>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}