{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nvar _hoisted_1 = {\n  style: {\n    \"text-align\": \"center\"\n  }\n};\nvar _hoisted_2 = {\n  class: \"avatar-croppa-container\"\n};\n\nvar _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"margin-top\": \"1em\"\n  }\n}, \"通过鼠标滚轮调节头像大小\", -1\n/* HOISTED */\n);\n\nvar _hoisted_4 = {\n  class: \"dialog-footer\"\n};\n\nvar _hoisted_5 = /*#__PURE__*/_createTextVNode(\"取 消\");\n\nvar _hoisted_6 = /*#__PURE__*/_createTextVNode(\"确 定\");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_vue_picture_cropper = _resolveComponent(\"vue-picture-cropper\");\n\n  var _component_el_button = _resolveComponent(\"el-button\");\n\n  var _component_el_dialog = _resolveComponent(\"el-dialog\");\n\n  return _openBlock(), _createBlock(_component_el_dialog, {\n    center: \"\",\n    title: \"裁剪\",\n    width: \"300px\",\n    \"append-to-body\": true,\n    \"close-on-click-modal\": false,\n    \"model-value\": $props.cropVisible,\n    \"custom-class\": \"croppa-dialog\"\n  }, {\n    footer: _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_button, {\n        onClick: $options.switchStatus,\n        size: \"small\"\n      }, {\n        default: _withCtx(function () {\n          return [_hoisted_5];\n        }),\n        _: 1\n        /* STABLE */\n\n      }, 8\n      /* PROPS */\n      , [\"onClick\"]), _createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: $options.handleCrop,\n        size: \"small\"\n      }, {\n        default: _withCtx(function () {\n          return [_hoisted_6];\n        }),\n        _: 1\n        /* STABLE */\n\n      }, 8\n      /* PROPS */\n      , [\"onClick\"])])];\n    }),\n    default: _withCtx(function () {\n      return [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_vue_picture_cropper, {\n        boxStyle: {\n          width: '100%',\n          height: '100%',\n          margin: 'auto',\n          backgroundColor: '#f8f8f8'\n        },\n        img: $props.originalImage,\n        options: {\n          viewMode: 1,\n          // 限制裁剪框不超过画布的大小\n          aspectRatio: 1 // 头像使用长宽比为 1 裁剪\n\n        }\n      }, null, 8\n      /* PROPS */\n      , [\"img\"])]), _hoisted_3])];\n    }),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"model-value\"]);\n}","map":{"version":3,"sources":["/Users/zhahn/Documents/Hahn/自考/项目/mall_cms/src/component/layout/avatar.vue"],"names":[],"mappings":";;AAUS,EAAA,KAA2B,EAA3B;AAAA,kBAAA;AAAA;;;AACE,EAAA,KAAK,EAAC;;;8BAeX,mBAAA,CAAgD,KAAhD,EAAgD;AAA3C,EAAA,KAAwB,EAAxB;AAAA,kBAAA;AAAA;AAA2C,CAAhD,EAA8B,cAA9B,EAA0C,CAAA;AAAA;AAA1C,C;;;AAIK,EAAA,KAAK,EAAC;;;+CACqC,K;;+CACa,K;;;;;;;;;uBA/BjE,YAAA,CAkCY,oBAlCZ,EAkCY;AAjCV,IAAA,MAAM,EAAN,EAiCU;AAhCV,IAAA,KAAK,EAAC,IAgCI;AA/BV,IAAA,KAAK,EAAC,OA+BI;AA9BT,sBAAgB,IA8BP;AA7BT,4BAAsB,KA6Bb;AA5BT,mBAAa,MAAA,CAAA,WA4BJ;AA3BV,oBAAa;AA2BH,GAlCZ,E;AA4Ba,IAAA,MAAM,EAAA,QAAA,CACf;AAAA,aAGM,CAHN,mBAAA,CAGM,KAHN,EAAA,UAAA,EAGM,CAFJ,YAAA,CAA6D,oBAA7D,EAA6D;AAAjD,QAAA,OAAK,EAAE,QAAA,CAAA,YAA0C;AAA5B,QAAA,IAAI,EAAC;AAAuB,OAA7D,E;0BAA8C;AAAA,iBAAG,C,UAAA,CAAH;AAAA,S;;;;OAA9C,E;;AAAA,Q,WAAA,CAEI,EADJ,YAAA,CAA0E,oBAA1E,EAA0E;AAA/D,QAAA,IAAI,EAAC,SAA0D;AAA/C,QAAA,OAAK,EAAE,QAAA,CAAA,UAAwC;AAA5B,QAAA,IAAI,EAAC;AAAuB,OAA1E,E;0BAA2D;AAAA,iBAAG,C,UAAA,CAAH;AAAA,S;;;;OAA3D,E;;AAAA,Q,WAAA,CACI,CAHN,CAGM,CAHN;AAAA,KADe,C;sBAnBjB;AAAA,aAiBM,CAjBN,mBAAA,CAiBM,KAjBN,EAAA,UAAA,EAiBM,CAhBJ,mBAAA,CAcM,KAdN,EAAA,UAAA,EAcM,CAbJ,YAAA,CAYE,8BAZF,EAYE;AAXC,QAAA,QAAQ,EAAE;uBAAA;wBAAA;wBAAA;;AAAA,SAWX;AALC,QAAA,GAAG,EAAE,MAAA,CAAA,aAKN;AAJC,QAAA,OAAO,EAAE;qBAAA;;wBAAA,C;;AAAA;AAIV,OAZF,E,IAAA,E;;AAAA,Q,OAAA,CAaI,CAdN,CAgBI,EADJ,UACI,CAjBN,CAiBM,CAjBN;AAAA,K;;;;GATF,E;;AAAA,I,eAAA,C","sourcesContent":["<template>\n  <el-dialog\n    center\n    title=\"裁剪\"\n    width=\"300px\"\n    :append-to-body=\"true\"\n    :close-on-click-modal=\"false\"\n    :model-value=\"cropVisible\"\n    custom-class=\"croppa-dialog\"\n  >\n    <div style=\"text-align: center;\">\n      <div class=\"avatar-croppa-container\">\n        <vue-picture-cropper\n          :boxStyle=\"{\n            width: '100%',\n            height: '100%',\n            margin: 'auto',\n            backgroundColor: '#f8f8f8',\n          }\"\n          :img=\"originalImage\"\n          :options=\"{\n            viewMode: 1, // 限制裁剪框不超过画布的大小\n            aspectRatio: 1, // 头像使用长宽比为 1 裁剪\n          }\"\n        />\n      </div>\n      <div style=\"margin-top: 1em;\">通过鼠标滚轮调节头像大小</div>\n    </div>\n\n    <template #footer>\n      <div class=\"dialog-footer\">\n        <el-button @click=\"switchStatus\" size=\"small\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleCrop\" size=\"small\">确 定</el-button>\n      </div>\n    </template>\n  </el-dialog>\n</template>\n\n<script>\nimport User from 'lin/model/user'\nimport { mapActions } from 'vuex'\nimport { post, put } from 'lin/plugin/axios'\nimport VuePictureCropper, { cropper } from 'vue-picture-cropper'\n\nexport default {\n  components: { VuePictureCropper },\n  props: {\n    originalImage: {\n      type: String,\n    },\n    cropVisible: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['switchCropVisible'],\n  methods: {\n    ...mapActions(['setUserAndState']),\n    handleCrop() {\n      // 获取裁剪数据\n      const blob = cropper.getBlob()\n      // 构造为文件对象\n      const file = new File([blob], 'avatar.jpg', { type: 'image/jpeg' })\n\n      return post('/cms/file', {\n        file,\n      }).then(res => {\n        // 清空输入框\n        if (!Array.isArray(res) || res.length !== 1) {\n          this.$message.error('头像上传失败, 请重试')\n          return false\n        }\n        return put('/cms/user', {\n          avatar: res[0].path,\n        })\n          .then(putRes => {\n            if (putRes.code < window.MAX_SUCCESS_CODE) {\n              this.$message({\n                type: 'success',\n                message: '更新头像成功',\n              })\n              this.switchStatus()\n              // 触发重新获取用户信息\n              return User.getInformation()\n            }\n            return Promise.reject(new Error('更新头像失败'))\n          })\n          .then(infoRes => {\n            // eslint-disable-line\n            // 尝试获取当前用户信息\n            const user = infoRes\n            this.setUserAndState(user)\n          })\n      })\n    },\n    switchStatus() {\n      this.$emit('switchCropVisible', false)\n    },\n  },\n}\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}